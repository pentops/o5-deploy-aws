syntax = "proto3";

package o5.aws.infra.v1.topic;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";
import "j5/messaging/v1/annotations.proto";
import "j5/messaging/v1/reqres.proto";

option go_package = "github.com/pentops/o5-deploy-aws/gen/o5/awsinfra/v1/awsinfra_tpb";

service ECSRequestTopic {
  option (j5.messaging.v1.config).request.name = "o5-aws-command";
  rpc RunECSTask(RunECSTaskMessage) returns (google.protobuf.Empty) {}
}

service ECSReplyTopic {
  option (j5.messaging.v1.config).reply.name = "o5-aws-command";
  rpc ECSTaskStatus(ECSTaskStatusMessage) returns (google.protobuf.Empty) {}
}

message RunECSTaskMessage {
  j5.messaging.v1.RequestMetadata request = 1;
  string task_definition = 2;
  int32 count = 3;
  string cluster = 4;
}

message ECSTaskStatusMessage {
  j5.messaging.v1.RequestMetadata request = 1;
  string event_id = 2 [(buf.validate.field).string.uuid = true];
  ECSTaskEventType event = 3;
  string task_arn = 4;
}

message ECSTaskEventType {
  // https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html#task-lifecycle
  oneof type {
    // Maps directly to the Pending state in ECS, indicates some level of
    // success
    Pending pending = 1;

    // Maps directly to the Running state in ECS
    Running running = 2;

    // Did not start, i.e. did not get to Running
    Failed failed = 3;

    // The code itself exited, after Running
    Exited exited = 4;

    // Deliberately stoped, e.g. by scaling, after Running
    Stopped stopped = 5;
  }

  message Pending {}

  message Running {}

  message Failed {
    string reason = 1;
    optional string container_name = 2;
  }

  message Exited {
    string container_name = 1;
    int32 exit_code = 2;
  }

  message Stopped {
    string reason = 1;
  }
}
