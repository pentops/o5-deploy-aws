syntax = "proto3";

package o5.aws.deployer.v1.service;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "j5/ext/v1/annotations.proto";
import "o5/application/v1/application.proto";
import "o5/auth/v1/annotations.proto";
import "o5/aws/deployer/v1/cluster.proto";
import "o5/aws/deployer/v1/deployment.proto";
import "o5/aws/deployer/v1/environment.proto";
import "o5/aws/deployer/v1/stack.proto";
import "o5/environment/v1/cluster.proto";
import "o5/environment/v1/environment.proto";

option go_package = "github.com/pentops/o5-deploy-aws/gen/o5/aws/deployer/v1/awsdeployer_spb";

service DeploymentCommandService {
  option (o5.auth.v1.default_auth).none = {};
  rpc TriggerDeployment(TriggerDeploymentRequest) returns (TriggerDeploymentResponse) {
    option (google.api.http) = {
      post: "/deployer/v1/c/deployments/{deployment_id}"
      body: "*"
    };
  }

  rpc TerminateDeployment(TerminateDeploymentRequest) returns (TerminateDeploymentResponse) {
    option (google.api.http) = {delete: "/deployer/v1/c/deployments/{deployment_id}"};
  }

  rpc UpsertCluster(UpsertClusterRequest) returns (UpsertClusterResponse) {
    option (google.api.http) = {
      post: "/deployer/v1/c/clusters/config"
      body: "*"
    };
  }

  rpc UpsertEnvironment(UpsertEnvironmentRequest) returns (UpsertEnvironmentResponse) {
    option (google.api.http) = {
      post: "/deployer/v1/c/environments/{environment_id}/config"
      body: "*"
    };
  }

  rpc UpsertStack(UpsertStackRequest) returns (UpsertStackResponse) {
    option (google.api.http) = {
      post: "/deployer/v1/c/stacks/{stack_id}/config"
      body: "*"
    };
  }
}

message TriggerDeploymentRequest {
  string deployment_id = 1 [(buf.validate.field).string.uuid = true];

  // Should be either a UUID, or the environment's full name
  string environment = 2;

  TriggerSource source = 3;

  o5.aws.deployer.v1.DeploymentFlags flags = 4;
}

message TriggerSource {
  option (j5.ext.v1.message).is_oneof_wrapper = true;
  oneof type {
    GithubSource github = 10;
    InlineSource inline = 11;
  }

  message GithubSource {
    string owner = 2 [(buf.validate.field).required = true];
    string repo = 3 [(buf.validate.field).required = true];
    oneof ref {
      string branch = 4;
      string tag = 5;
      string commit = 6;
    }
  }

  message InlineSource {
    string version = 1 [(buf.validate.field).required = true];
    o5.application.v1.Application application = 2 [(buf.validate.field).required = true];
  }
}

message TriggerDeploymentResponse {
  string deployment_id = 1 [(buf.validate.field).string.uuid = true];
  string environment_id = 2 [(buf.validate.field).string.uuid = true];
  string cluster_id = 3 [(buf.validate.field).string.uuid = true];
}

message TerminateDeploymentRequest {
  string deployment_id = 1 [(buf.validate.field).string.uuid = true];
}

message TerminateDeploymentResponse {}

message UpsertClusterRequest {
  // Either a UUID, or the cluster's full name
  string cluster_id = 1;

  // if combined contains environments, they will also be upserted.
  oneof src {
    o5.environment.v1.CombinedConfig config = 10;
    bytes config_yaml = 11;
    bytes config_json = 12;
  }
}

message UpsertClusterResponse {
  o5.aws.deployer.v1.ClusterState state = 1 [(buf.validate.field).required = true];
}

message UpsertEnvironmentRequest {
  // Either a UUID, or the environment's full name
  string environment_id = 1;

  // Either a UUID or the cluster's name
  string cluster_id = 2;

  oneof src {
    o5.environment.v1.Environment config = 10;
    bytes config_yaml = 11;
    bytes config_json = 12;
  }
}

message UpsertEnvironmentResponse {
  o5.aws.deployer.v1.EnvironmentState state = 1 [(buf.validate.field).required = true];
}

message UpsertStackRequest {
  // Should be either a UUID, or the env-app style name for the stack.
  string stack_id = 1;
}

message UpsertStackResponse {
  o5.aws.deployer.v1.StackState state = 1 [(buf.validate.field).required = true];
}
