// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package drss_pb

import (
	driver "database/sql/driver"
	fmt "fmt"

	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *StepMeta) Clone() any {
	return proto.Clone(msg).(*StepMeta)
}
func (msg *StepMeta) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *StepMeta) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *StepResult) Clone() any {
	return proto.Clone(msg).(*StepResult)
}
func (msg *StepResult) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *StepResult) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// StepStatus
const (
	StepStatus_UNSPECIFIED StepStatus = 0
	StepStatus_BLOCKED     StepStatus = 1
	StepStatus_READY       StepStatus = 2
	StepStatus_ACTIVE      StepStatus = 3
	StepStatus_DONE        StepStatus = 4
	StepStatus_FAILED      StepStatus = 5
)

var (
	StepStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "BLOCKED",
		2: "READY",
		3: "ACTIVE",
		4: "DONE",
		5: "FAILED",
	}
	StepStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"BLOCKED":     1,
		"READY":       2,
		"ACTIVE":      3,
		"DONE":        4,
		"FAILED":      5,
	}
	StepStatus_value_either = map[string]int32{
		"UNSPECIFIED":             0,
		"STEP_STATUS_UNSPECIFIED": 0,
		"BLOCKED":                 1,
		"STEP_STATUS_BLOCKED":     1,
		"READY":                   2,
		"STEP_STATUS_READY":       2,
		"ACTIVE":                  3,
		"STEP_STATUS_ACTIVE":      3,
		"DONE":                    4,
		"STEP_STATUS_DONE":        4,
		"FAILED":                  5,
		"STEP_STATUS_FAILED":      5,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x StepStatus) ShortString() string {
	return StepStatus_name_short[int32(x)]
}
func (x StepStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *StepStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := StepStatus_value_either[strVal]
	*x = StepStatus(val)
	return nil
}
