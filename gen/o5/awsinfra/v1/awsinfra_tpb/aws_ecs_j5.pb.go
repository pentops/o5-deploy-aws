// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsinfra_tpb

import (
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	j5schema "github.com/pentops/j5/lib/j5schema"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func (msg *RunECSTaskMessage) Clone() any {
	return proto.Clone(msg).(*RunECSTaskMessage)
}
func (msg *RunECSTaskMessage) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *RunECSTaskMessage) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *SetECSScaleMessage) Clone() any {
	return proto.Clone(msg).(*SetECSScaleMessage)
}
func (msg *SetECSScaleMessage) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *SetECSScaleMessage) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSTaskStatusMessage) Clone() any {
	return proto.Clone(msg).(*ECSTaskStatusMessage)
}
func (msg *ECSTaskStatusMessage) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskStatusMessage) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ECSTaskEventType is a oneof wrapper
type ECSTaskEventTypeKey string

const (
	ECSTaskEvent_Type_Pending ECSTaskEventTypeKey = "pending"
	ECSTaskEvent_Type_Running ECSTaskEventTypeKey = "running"
	ECSTaskEvent_Type_Failed  ECSTaskEventTypeKey = "failed"
	ECSTaskEvent_Type_Exited  ECSTaskEventTypeKey = "exited"
	ECSTaskEvent_Type_Stopped ECSTaskEventTypeKey = "stopped"
)

func (x *ECSTaskEventType) TypeKey() (ECSTaskEventTypeKey, bool) {
	switch x.Type.(type) {
	case *ECSTaskEventType_Pending_:
		return ECSTaskEvent_Type_Pending, true
	case *ECSTaskEventType_Running_:
		return ECSTaskEvent_Type_Running, true
	case *ECSTaskEventType_Failed_:
		return ECSTaskEvent_Type_Failed, true
	case *ECSTaskEventType_Exited_:
		return ECSTaskEvent_Type_Exited, true
	case *ECSTaskEventType_Stopped_:
		return ECSTaskEvent_Type_Stopped, true
	default:
		return "", false
	}
}

type IsECSTaskEventTypeWrappedType interface {
	ECSTaskEventTypeKey() ECSTaskEventTypeKey
	proto.Message
}

func (x *ECSTaskEventType) Set(val IsECSTaskEventTypeWrappedType) {
	switch v := val.(type) {
	case *ECSTaskEventType_Pending:
		x.Type = &ECSTaskEventType_Pending_{Pending: v}
	case *ECSTaskEventType_Running:
		x.Type = &ECSTaskEventType_Running_{Running: v}
	case *ECSTaskEventType_Failed:
		x.Type = &ECSTaskEventType_Failed_{Failed: v}
	case *ECSTaskEventType_Exited:
		x.Type = &ECSTaskEventType_Exited_{Exited: v}
	case *ECSTaskEventType_Stopped:
		x.Type = &ECSTaskEventType_Stopped_{Stopped: v}
	}
}
func (x *ECSTaskEventType) Get() IsECSTaskEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *ECSTaskEventType_Pending_:
		return v.Pending
	case *ECSTaskEventType_Running_:
		return v.Running
	case *ECSTaskEventType_Failed_:
		return v.Failed
	case *ECSTaskEventType_Exited_:
		return v.Exited
	case *ECSTaskEventType_Stopped_:
		return v.Stopped
	default:
		return nil
	}
}
func (x *ECSTaskEventType_Pending) ECSTaskEventTypeKey() ECSTaskEventTypeKey {
	return ECSTaskEvent_Type_Pending
}
func (x *ECSTaskEventType_Running) ECSTaskEventTypeKey() ECSTaskEventTypeKey {
	return ECSTaskEvent_Type_Running
}
func (x *ECSTaskEventType_Failed) ECSTaskEventTypeKey() ECSTaskEventTypeKey {
	return ECSTaskEvent_Type_Failed
}
func (x *ECSTaskEventType_Exited) ECSTaskEventTypeKey() ECSTaskEventTypeKey {
	return ECSTaskEvent_Type_Exited
}
func (x *ECSTaskEventType_Stopped) ECSTaskEventTypeKey() ECSTaskEventTypeKey {
	return ECSTaskEvent_Type_Stopped
}
func (msg *ECSTaskEventType) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType)
}

type IsECSTaskEventType_Type = isECSTaskEventType_Type

func (msg *ECSTaskEventType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Pending) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType_Pending)
}
func (msg *ECSTaskEventType_Pending) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Pending) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSTaskEventType_Running) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType_Running)
}
func (msg *ECSTaskEventType_Running) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Running) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSTaskEventType_Failed) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType_Failed)
}
func (msg *ECSTaskEventType_Failed) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Failed) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSTaskEventType_Exited) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType_Exited)
}
func (msg *ECSTaskEventType_Exited) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Exited) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSTaskEventType_Stopped) Clone() any {
	return proto.Clone(msg).(*ECSTaskEventType_Stopped)
}
func (msg *ECSTaskEventType_Stopped) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSTaskEventType_Stopped) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ECSDeploymentStatusMessage) Clone() any {
	return proto.Clone(msg).(*ECSDeploymentStatusMessage)
}
func (msg *ECSDeploymentStatusMessage) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ECSDeploymentStatusMessage) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// RunECSTask is a J5 method for service ECSRequestTopic
func RunECSTaskJ5MethodSchema() *j5schema.MethodSchema {
	return &j5schema.MethodSchema{
		Request:  j5schema.MustObjectSchema((&RunECSTaskMessage{}).ProtoReflect().Descriptor()),
		Response: j5schema.MustObjectSchema((&emptypb.Empty{}).ProtoReflect().Descriptor()),
	}
}

// SetECSScale is a J5 method for service ECSRequestTopic
func SetECSScaleJ5MethodSchema() *j5schema.MethodSchema {
	return &j5schema.MethodSchema{
		Request:  j5schema.MustObjectSchema((&SetECSScaleMessage{}).ProtoReflect().Descriptor()),
		Response: j5schema.MustObjectSchema((&emptypb.Empty{}).ProtoReflect().Descriptor()),
	}
}

// ECSTaskStatus is a J5 method for service ECSReplyTopic
func ECSTaskStatusJ5MethodSchema() *j5schema.MethodSchema {
	return &j5schema.MethodSchema{
		Request:  j5schema.MustObjectSchema((&ECSTaskStatusMessage{}).ProtoReflect().Descriptor()),
		Response: j5schema.MustObjectSchema((&emptypb.Empty{}).ProtoReflect().Descriptor()),
	}
}

// ECSDeploymentStatus is a J5 method for service ECSReplyTopic
func ECSDeploymentStatusJ5MethodSchema() *j5schema.MethodSchema {
	return &j5schema.MethodSchema{
		Request:  j5schema.MustObjectSchema((&ECSDeploymentStatusMessage{}).ProtoReflect().Descriptor()),
		Response: j5schema.MustObjectSchema((&emptypb.Empty{}).ProtoReflect().Descriptor()),
	}
}
