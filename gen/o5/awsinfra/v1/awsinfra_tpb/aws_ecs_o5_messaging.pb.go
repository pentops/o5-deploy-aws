// Code generated by Bprotoc-gen-go-o5-messaging . DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/awsinfra/v1/topic/aws_ecs.proto

package awsinfra_tpb

import (
	context "context"

	messaging_pb "github.com/pentops/o5-go/messaging/v1/messaging_pb"
	o5msg "github.com/pentops/o5-messaging.go/o5msg"
)

// Service: ECSRequestTopic
type ECSRequestTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewECSRequestTopicSender[C any](sender o5msg.Sender[C]) *ECSRequestTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.awsinfra.v1.topic.ECSRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "RunECSTask",
				Message: (*RunECSTaskMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ECSRequestTopicSender[C]{Sender: sender}
}

type ECSRequestTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewECSRequestTopicCollector[C any](collector o5msg.Collector[C]) *ECSRequestTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.awsinfra.v1.topic.ECSRequestTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "RunECSTask",
				Message: (*RunECSTaskMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ECSRequestTopicCollector[C]{Collector: collector}
}

// Method: RunECSTask

func (msg *RunECSTaskMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.awsinfra.v1.topic.ECSRequestTopic",
		GrpcMethod:       "RunECSTask",
		Headers:          map[string]string{},
		DestinationTopic: "o5-aws-command_request",
	}
	return header
}

func (send ECSRequestTopicSender[C]) RunECSTask(ctx context.Context, sendContext C, msg *RunECSTaskMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect ECSRequestTopicCollector[C]) RunECSTask(sendContext C, msg *RunECSTaskMessage) {
	collect.Collector.Collect(sendContext, msg)
}

// Service: ECSReplyTopic
type ECSReplyTopicSender[C any] struct {
	Sender o5msg.Sender[C]
}

func NewECSReplyTopicSender[C any](sender o5msg.Sender[C]) *ECSReplyTopicSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.awsinfra.v1.topic.ECSReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "ECSTaskStatus",
				Message: (*ECSTaskStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ECSReplyTopicSender[C]{Sender: sender}
}

type ECSReplyTopicCollector[C any] struct {
	Collector o5msg.Collector[C]
}

func NewECSReplyTopicCollector[C any](collector o5msg.Collector[C]) *ECSReplyTopicCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.awsinfra.v1.topic.ECSReplyTopic",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "ECSTaskStatus",
				Message: (*ECSTaskStatusMessage).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &ECSReplyTopicCollector[C]{Collector: collector}
}

// Method: ECSTaskStatus

func (msg *ECSTaskStatusMessage) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.awsinfra.v1.topic.ECSReplyTopic",
		GrpcMethod:       "ECSTaskStatus",
		Headers:          map[string]string{},
		DestinationTopic: "o5-aws-command_reply",
	}
	if msg.Request != nil {
		header.Extension = &messaging_pb.Message_Reply_{
			Reply: &messaging_pb.Message_Reply{
				ReplyTo: msg.Request.ReplyTo,
			},
		}
	}
	return header
}

func (send ECSReplyTopicSender[C]) ECSTaskStatus(ctx context.Context, sendContext C, msg *ECSTaskStatusMessage) error {
	return send.Sender.Send(ctx, sendContext, msg)
}

func (collect ECSReplyTopicCollector[C]) ECSTaskStatus(sendContext C, msg *ECSTaskStatusMessage) {
	collect.Collector.Collect(sendContext, msg)
}
