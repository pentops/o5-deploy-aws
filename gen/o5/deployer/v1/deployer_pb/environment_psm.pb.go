// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package deployer_pb

import (
	context "context"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	proto "google.golang.org/protobuf/proto"
)

// StateObjectOptions: EnvironmentPSM
type EnvironmentPSM = psm.StateMachine[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

type EnvironmentPSMDB = psm.DBStateMachine[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

type EnvironmentPSMEventer = psm.Eventer[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

func DefaultEnvironmentPSMConfig() *psm.StateMachineConfig[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
	](DefaultEnvironmentPSMTableSpec)
}

func NewEnvironmentPSM(config *psm.StateMachineConfig[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]) (*EnvironmentPSM, error) {
	return psm.NewStateMachine[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
	](config)
}

type EnvironmentPSMTableSpec = psm.PSMTableSpec[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

var DefaultEnvironmentPSMTableSpec = EnvironmentPSMTableSpec{
	State: psm.TableSpec[*EnvironmentState]{
		TableName:  "environment",
		DataColumn: "state",
		StoreExtraColumns: func(state *EnvironmentState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"keys.environment_id",
		},
	},
	Event: psm.TableSpec[*EnvironmentEvent]{
		TableName:  "environment_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *EnvironmentEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":             metadata.EventId,
				"timestamp":      metadata.Timestamp,
				"cause":          metadata.Cause,
				"sequence":       metadata.Sequence,
				"environment_id": event.Keys.EnvironmentId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
		PK: func(event *EnvironmentEvent) (map[string]interface{}, error) {
			return map[string]interface{}{
				"id": event.Metadata.EventId,
			}, nil
		},
	},
	PrimaryKey: func(event *EnvironmentEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.Keys.EnvironmentId,
		}, nil
	},
}

type EnvironmentPSMTransitionBaton = psm.TransitionBaton[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

type EnvironmentPSMHookBaton = psm.StateHookBaton[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
]

func EnvironmentPSMFunc[SE EnvironmentPSMEvent](cb func(context.Context, EnvironmentPSMTransitionBaton, *EnvironmentState, SE) error) psm.PSMCombinedFunc[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
	SE,
] {
	return psm.PSMCombinedFunc[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
		SE,
	](cb)
}
func EnvironmentPSMTransition[SE EnvironmentPSMEvent](cb func(context.Context, *EnvironmentState, SE) error) psm.PSMTransitionFunc[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
	SE,
] {
	return psm.PSMTransitionFunc[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
		SE,
	](cb)
}
func EnvironmentPSMHook[SE EnvironmentPSMEvent](cb func(context.Context, sqrlx.Transaction, EnvironmentPSMHookBaton, *EnvironmentState, SE) error) psm.PSMHookFunc[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
	SE,
] {
	return psm.PSMHookFunc[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
		SE,
	](cb)
}
func EnvironmentPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, *EnvironmentState, *EnvironmentEvent) error) psm.GeneralStateHook[
	*EnvironmentKeys,
	*EnvironmentState,
	EnvironmentStatus,
	*EnvironmentEvent,
	EnvironmentPSMEvent,
] {
	return psm.GeneralStateHook[
		*EnvironmentKeys,
		*EnvironmentState,
		EnvironmentStatus,
		*EnvironmentEvent,
		EnvironmentPSMEvent,
	](cb)
}

type EnvironmentPSMEventKey = string

const (
	EnvironmentPSMEventNil        EnvironmentPSMEventKey = "<nil>"
	EnvironmentPSMEventConfigured EnvironmentPSMEventKey = "configured"
)

type EnvironmentPSMEvent interface {
	proto.Message
	PSMEventKey() EnvironmentPSMEventKey
}

func (etw *EnvironmentEventType) UnwrapPSMEvent() EnvironmentPSMEvent {
	if etw == nil {
		return nil
	}
	switch v := etw.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return v.Configured
	default:
		return nil
	}
}
func (etw *EnvironmentEventType) PSMEventKey() EnvironmentPSMEventKey {
	tt := etw.UnwrapPSMEvent()
	if tt == nil {
		return EnvironmentPSMEventNil
	}
	return tt.PSMEventKey()
}
func (etw *EnvironmentEventType) SetPSMEvent(inner EnvironmentPSMEvent) {
	switch v := inner.(type) {
	case *EnvironmentEventType_Configured:
		etw.Type = &EnvironmentEventType_Configured_{Configured: v}
	default:
		panic("invalid type")
	}
}

func (ee *EnvironmentEvent) PSMEventKey() EnvironmentPSMEventKey {
	return ee.Event.PSMEventKey()
}

func (ee *EnvironmentEvent) UnwrapPSMEvent() EnvironmentPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}

func (ee *EnvironmentEvent) SetPSMEvent(inner EnvironmentPSMEvent) {
	if ee.Event == nil {
		ee.Event = &EnvironmentEventType{}
	}
	ee.Event.SetPSMEvent(inner)
}

func (*EnvironmentEventType_Configured) PSMEventKey() EnvironmentPSMEventKey {
	return EnvironmentPSMEventConfigured
}
func (ee *EnvironmentEvent) PSMMetadata() *psm_pb.EventMetadata {
	if ee.Metadata == nil {
		ee.Metadata = &psm_pb.EventMetadata{}
	}
	return ee.Metadata
}

func (st *EnvironmentState) PSMMetadata() *psm_pb.StateMetadata {
	if st.Metadata == nil {
		st.Metadata = &psm_pb.StateMetadata{}
	}
	return st.Metadata
}

func (ee *EnvironmentEvent) PSMKeys() *EnvironmentKeys {
	return ee.Keys
}

func (ee *EnvironmentEvent) SetPSMKeys(inner *EnvironmentKeys) {
	ee.Keys = inner
}

func (st *EnvironmentState) PSMKeys() *EnvironmentKeys {
	return st.Keys
}

func (st *EnvironmentState) SetPSMKeys(inner *EnvironmentKeys) {
	st.Keys = inner
}
