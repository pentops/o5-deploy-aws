// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package deployer_pb

import (
	context "context"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	proto "google.golang.org/protobuf/proto"
)

// StateObjectOptions: DeploymentPSM
type DeploymentPSM = psm.StateMachine[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

type DeploymentPSMDB = psm.DBStateMachine[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

type DeploymentPSMEventer = psm.Eventer[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

func DefaultDeploymentPSMConfig() *psm.StateMachineConfig[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
] {
	return psm.NewStateMachineConfig[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
	](DefaultDeploymentPSMTableSpec)
}

func NewDeploymentPSM(config *psm.StateMachineConfig[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]) (*DeploymentPSM, error) {
	return psm.NewStateMachine[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
	](config)
}

type DeploymentPSMTableSpec = psm.PSMTableSpec[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

var DefaultDeploymentPSMTableSpec = DeploymentPSMTableSpec{
	State: psm.TableSpec[*DeploymentState]{
		TableName:  "deployment",
		DataColumn: "state",
		StoreExtraColumns: func(state *DeploymentState) (map[string]interface{}, error) {
			return map[string]interface{}{}, nil
		},
		PKFieldPaths: []string{
			"keys.deployment_id",
		},
	},
	Event: psm.TableSpec[*DeploymentEvent]{
		TableName:  "deployment_event",
		DataColumn: "data",
		StoreExtraColumns: func(event *DeploymentEvent) (map[string]interface{}, error) {
			metadata := event.Metadata
			return map[string]interface{}{
				"id":            metadata.EventId,
				"timestamp":     metadata.Timestamp,
				"cause":         metadata.Cause,
				"sequence":      metadata.Sequence,
				"deployment_id": event.Keys.DeploymentId,
			}, nil
		},
		PKFieldPaths: []string{
			"metadata.EventId",
		},
		PK: func(event *DeploymentEvent) (map[string]interface{}, error) {
			return map[string]interface{}{
				"id": event.Metadata.EventId,
			}, nil
		},
	},
	PrimaryKey: func(event *DeploymentEvent) (map[string]interface{}, error) {
		return map[string]interface{}{
			"id": event.Keys.DeploymentId,
		}, nil
	},
}

type DeploymentPSMTransitionBaton = psm.TransitionBaton[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

type DeploymentPSMHookBaton = psm.StateHookBaton[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
]

func DeploymentPSMFunc[SE DeploymentPSMEvent](cb func(context.Context, DeploymentPSMTransitionBaton, *DeploymentState, SE) error) psm.PSMCombinedFunc[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
	SE,
] {
	return psm.PSMCombinedFunc[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
		SE,
	](cb)
}
func DeploymentPSMTransition[SE DeploymentPSMEvent](cb func(context.Context, *DeploymentState, SE) error) psm.PSMTransitionFunc[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
	SE,
] {
	return psm.PSMTransitionFunc[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
		SE,
	](cb)
}
func DeploymentPSMHook[SE DeploymentPSMEvent](cb func(context.Context, sqrlx.Transaction, DeploymentPSMHookBaton, *DeploymentState, SE) error) psm.PSMHookFunc[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
	SE,
] {
	return psm.PSMHookFunc[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
		SE,
	](cb)
}
func DeploymentPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, *DeploymentState, *DeploymentEvent) error) psm.GeneralStateHook[
	*DeploymentKeys,
	*DeploymentState,
	DeploymentStatus,
	*DeploymentEvent,
	DeploymentPSMEvent,
] {
	return psm.GeneralStateHook[
		*DeploymentKeys,
		*DeploymentState,
		DeploymentStatus,
		*DeploymentEvent,
		DeploymentPSMEvent,
	](cb)
}

type DeploymentPSMEventKey = string

const (
	DeploymentPSMEventNil              DeploymentPSMEventKey = "<nil>"
	DeploymentPSMEventCreated          DeploymentPSMEventKey = "created"
	DeploymentPSMEventTriggered        DeploymentPSMEventKey = "triggered"
	DeploymentPSMEventStackWait        DeploymentPSMEventKey = "stack_wait"
	DeploymentPSMEventStackWaitFailure DeploymentPSMEventKey = "stack_wait_failure"
	DeploymentPSMEventStackAvailable   DeploymentPSMEventKey = "stack_available"
	DeploymentPSMEventRunSteps         DeploymentPSMEventKey = "run_steps"
	DeploymentPSMEventStepResult       DeploymentPSMEventKey = "step_result"
	DeploymentPSMEventError            DeploymentPSMEventKey = "error"
	DeploymentPSMEventDone             DeploymentPSMEventKey = "done"
	DeploymentPSMEventTerminated       DeploymentPSMEventKey = "terminated"
)

type DeploymentPSMEvent interface {
	proto.Message
	PSMEventKey() DeploymentPSMEventKey
}

func (etw *DeploymentEventType) UnwrapPSMEvent() DeploymentPSMEvent {
	if etw == nil {
		return nil
	}
	switch v := etw.Type.(type) {
	case *DeploymentEventType_Created_:
		return v.Created
	case *DeploymentEventType_Triggered_:
		return v.Triggered
	case *DeploymentEventType_StackWait_:
		return v.StackWait
	case *DeploymentEventType_StackWaitFailure_:
		return v.StackWaitFailure
	case *DeploymentEventType_StackAvailable_:
		return v.StackAvailable
	case *DeploymentEventType_RunSteps_:
		return v.RunSteps
	case *DeploymentEventType_StepResult_:
		return v.StepResult
	case *DeploymentEventType_Error_:
		return v.Error
	case *DeploymentEventType_Done_:
		return v.Done
	case *DeploymentEventType_Terminated_:
		return v.Terminated
	default:
		return nil
	}
}
func (etw *DeploymentEventType) PSMEventKey() DeploymentPSMEventKey {
	tt := etw.UnwrapPSMEvent()
	if tt == nil {
		return DeploymentPSMEventNil
	}
	return tt.PSMEventKey()
}
func (etw *DeploymentEventType) SetPSMEvent(inner DeploymentPSMEvent) {
	switch v := inner.(type) {
	case *DeploymentEventType_Created:
		etw.Type = &DeploymentEventType_Created_{Created: v}
	case *DeploymentEventType_Triggered:
		etw.Type = &DeploymentEventType_Triggered_{Triggered: v}
	case *DeploymentEventType_StackWait:
		etw.Type = &DeploymentEventType_StackWait_{StackWait: v}
	case *DeploymentEventType_StackWaitFailure:
		etw.Type = &DeploymentEventType_StackWaitFailure_{StackWaitFailure: v}
	case *DeploymentEventType_StackAvailable:
		etw.Type = &DeploymentEventType_StackAvailable_{StackAvailable: v}
	case *DeploymentEventType_RunSteps:
		etw.Type = &DeploymentEventType_RunSteps_{RunSteps: v}
	case *DeploymentEventType_StepResult:
		etw.Type = &DeploymentEventType_StepResult_{StepResult: v}
	case *DeploymentEventType_Error:
		etw.Type = &DeploymentEventType_Error_{Error: v}
	case *DeploymentEventType_Done:
		etw.Type = &DeploymentEventType_Done_{Done: v}
	case *DeploymentEventType_Terminated:
		etw.Type = &DeploymentEventType_Terminated_{Terminated: v}
	default:
		panic("invalid type")
	}
}

func (ee *DeploymentEvent) PSMEventKey() DeploymentPSMEventKey {
	return ee.Event.PSMEventKey()
}

func (ee *DeploymentEvent) UnwrapPSMEvent() DeploymentPSMEvent {
	return ee.Event.UnwrapPSMEvent()
}

func (ee *DeploymentEvent) SetPSMEvent(inner DeploymentPSMEvent) {
	if ee.Event == nil {
		ee.Event = &DeploymentEventType{}
	}
	ee.Event.SetPSMEvent(inner)
}

func (*DeploymentEventType_Created) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventCreated
}
func (*DeploymentEventType_Triggered) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTriggered
}
func (*DeploymentEventType_StackWait) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWait
}
func (*DeploymentEventType_StackWaitFailure) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWaitFailure
}
func (*DeploymentEventType_StackAvailable) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackAvailable
}
func (*DeploymentEventType_RunSteps) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventRunSteps
}
func (*DeploymentEventType_StepResult) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStepResult
}
func (*DeploymentEventType_Error) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventError
}
func (*DeploymentEventType_Done) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventDone
}
func (*DeploymentEventType_Terminated) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTerminated
}
func (ee *DeploymentEvent) PSMMetadata() *psm_pb.EventMetadata {
	if ee.Metadata == nil {
		ee.Metadata = &psm_pb.EventMetadata{}
	}
	return ee.Metadata
}

func (st *DeploymentState) PSMMetadata() *psm_pb.StateMetadata {
	if st.Metadata == nil {
		st.Metadata = &psm_pb.StateMetadata{}
	}
	return st.Metadata
}

func (ee *DeploymentEvent) PSMKeys() *DeploymentKeys {
	return ee.Keys
}

func (ee *DeploymentEvent) SetPSMKeys(inner *DeploymentKeys) {
	ee.Keys = inner
}

func (st *DeploymentState) PSMKeys() *DeploymentKeys {
	return st.Keys
}

func (st *DeploymentState) SetPSMKeys(inner *DeploymentKeys) {
	st.Keys = inner
}
