// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: o5/aws/deployer/v1/service/cluster_query.proto

package awsdeployer_spb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClusterQueryService_ListClusters_FullMethodName      = "/o5.aws.deployer.v1.service.ClusterQueryService/ListClusters"
	ClusterQueryService_GetCluster_FullMethodName        = "/o5.aws.deployer.v1.service.ClusterQueryService/GetCluster"
	ClusterQueryService_ListClusterEvents_FullMethodName = "/o5.aws.deployer.v1.service.ClusterQueryService/ListClusterEvents"
)

// ClusterQueryServiceClient is the client API for ClusterQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterQueryServiceClient interface {
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error)
	ListClusterEvents(ctx context.Context, in *ListClusterEventsRequest, opts ...grpc.CallOption) (*ListClusterEventsResponse, error)
}

type clusterQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterQueryServiceClient(cc grpc.ClientConnInterface) ClusterQueryServiceClient {
	return &clusterQueryServiceClient{cc}
}

func (c *clusterQueryServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, ClusterQueryService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterQueryServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*GetClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterResponse)
	err := c.cc.Invoke(ctx, ClusterQueryService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterQueryServiceClient) ListClusterEvents(ctx context.Context, in *ListClusterEventsRequest, opts ...grpc.CallOption) (*ListClusterEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterEventsResponse)
	err := c.cc.Invoke(ctx, ClusterQueryService_ListClusterEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterQueryServiceServer is the server API for ClusterQueryService service.
// All implementations must embed UnimplementedClusterQueryServiceServer
// for forward compatibility
type ClusterQueryServiceServer interface {
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error)
	ListClusterEvents(context.Context, *ListClusterEventsRequest) (*ListClusterEventsResponse, error)
	mustEmbedUnimplementedClusterQueryServiceServer()
}

// UnimplementedClusterQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterQueryServiceServer struct {
}

func (UnimplementedClusterQueryServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedClusterQueryServiceServer) GetCluster(context.Context, *GetClusterRequest) (*GetClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedClusterQueryServiceServer) ListClusterEvents(context.Context, *ListClusterEventsRequest) (*ListClusterEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterEvents not implemented")
}
func (UnimplementedClusterQueryServiceServer) mustEmbedUnimplementedClusterQueryServiceServer() {}

// UnsafeClusterQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterQueryServiceServer will
// result in compilation errors.
type UnsafeClusterQueryServiceServer interface {
	mustEmbedUnimplementedClusterQueryServiceServer()
}

func RegisterClusterQueryServiceServer(s grpc.ServiceRegistrar, srv ClusterQueryServiceServer) {
	s.RegisterService(&ClusterQueryService_ServiceDesc, srv)
}

func _ClusterQueryService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterQueryServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterQueryService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterQueryServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterQueryService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterQueryServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterQueryService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterQueryServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterQueryService_ListClusterEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterQueryServiceServer).ListClusterEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterQueryService_ListClusterEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterQueryServiceServer).ListClusterEvents(ctx, req.(*ListClusterEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterQueryService_ServiceDesc is the grpc.ServiceDesc for ClusterQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.aws.deployer.v1.service.ClusterQueryService",
	HandlerType: (*ClusterQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _ClusterQueryService_ListClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ClusterQueryService_GetCluster_Handler,
		},
		{
			MethodName: "ListClusterEvents",
			Handler:    _ClusterQueryService_ListClusterEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/aws/deployer/v1/service/cluster_query.proto",
}
