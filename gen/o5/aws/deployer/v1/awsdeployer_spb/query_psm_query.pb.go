// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_spb

import (
	context "context"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sDeployment
// QuerySet is the query set for the Deployment service.

type DeploymentPSMQuerySet = psm.StateQuerySet[
	*GetDeploymentRequest,
	*GetDeploymentResponse,
	*ListDeploymentsRequest,
	*ListDeploymentsResponse,
	*ListDeploymentEventsRequest,
	*ListDeploymentEventsResponse,
]

func NewDeploymentPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetDeploymentRequest,
		*GetDeploymentResponse,
		*ListDeploymentsRequest,
		*ListDeploymentsResponse,
		*ListDeploymentEventsRequest,
		*ListDeploymentEventsResponse,
	],
	options psm.StateQueryOptions,
) (*DeploymentPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetDeploymentRequest,
		*GetDeploymentResponse,
		*ListDeploymentsRequest,
		*ListDeploymentsResponse,
		*ListDeploymentEventsRequest,
		*ListDeploymentEventsResponse,
	](smSpec, options)
}

type DeploymentPSMQuerySpec = psm.QuerySpec[
	*GetDeploymentRequest,
	*GetDeploymentResponse,
	*ListDeploymentsRequest,
	*ListDeploymentsResponse,
	*ListDeploymentEventsRequest,
	*ListDeploymentEventsResponse,
]

func DefaultDeploymentPSMQuerySpec(tableSpec psm.QueryTableSpec) DeploymentPSMQuerySpec {
	return psm.QuerySpec[
		*GetDeploymentRequest,
		*GetDeploymentResponse,
		*ListDeploymentsRequest,
		*ListDeploymentsResponse,
		*ListDeploymentEventsRequest,
		*ListDeploymentEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListDeploymentsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListDeploymentEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["deployment_id"] = req.DeploymentId
			return filter, nil
		},
	}
}

type DeploymentQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *DeploymentPSMQuerySet
	UnsafeDeploymentQueryServiceServer
}

var _ DeploymentQueryServiceServer = &DeploymentQueryServiceImpl{}

func NewDeploymentQueryServiceImpl(db sqrlx.Transactor, querySet *DeploymentPSMQuerySet) *DeploymentQueryServiceImpl {
	return &DeploymentQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *DeploymentQueryServiceImpl) GetDeployment(ctx context.Context, req *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	resObject := &GetDeploymentResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *DeploymentQueryServiceImpl) ListDeployments(ctx context.Context, req *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	resObject := &ListDeploymentsResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *DeploymentQueryServiceImpl) ListDeploymentEvents(ctx context.Context, req *ListDeploymentEventsRequest) (*ListDeploymentEventsResponse, error) {
	resObject := &ListDeploymentEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

// State Query Service for %sStack
// QuerySet is the query set for the Stack service.

type StackPSMQuerySet = psm.StateQuerySet[
	*GetStackRequest,
	*GetStackResponse,
	*ListStacksRequest,
	*ListStacksResponse,
	*ListStackEventsRequest,
	*ListStackEventsResponse,
]

func NewStackPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetStackRequest,
		*GetStackResponse,
		*ListStacksRequest,
		*ListStacksResponse,
		*ListStackEventsRequest,
		*ListStackEventsResponse,
	],
	options psm.StateQueryOptions,
) (*StackPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetStackRequest,
		*GetStackResponse,
		*ListStacksRequest,
		*ListStacksResponse,
		*ListStackEventsRequest,
		*ListStackEventsResponse,
	](smSpec, options)
}

type StackPSMQuerySpec = psm.QuerySpec[
	*GetStackRequest,
	*GetStackResponse,
	*ListStacksRequest,
	*ListStacksResponse,
	*ListStackEventsRequest,
	*ListStackEventsResponse,
]

func DefaultStackPSMQuerySpec(tableSpec psm.QueryTableSpec) StackPSMQuerySpec {
	return psm.QuerySpec[
		*GetStackRequest,
		*GetStackResponse,
		*ListStacksRequest,
		*ListStacksResponse,
		*ListStackEventsRequest,
		*ListStackEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListStacksRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListStackEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["stack_id"] = req.StackId
			return filter, nil
		},
	}
}

type StackQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *StackPSMQuerySet
	UnsafeStackQueryServiceServer
}

var _ StackQueryServiceServer = &StackQueryServiceImpl{}

func NewStackQueryServiceImpl(db sqrlx.Transactor, querySet *StackPSMQuerySet) *StackQueryServiceImpl {
	return &StackQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *StackQueryServiceImpl) GetStack(ctx context.Context, req *GetStackRequest) (*GetStackResponse, error) {
	resObject := &GetStackResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *StackQueryServiceImpl) ListStacks(ctx context.Context, req *ListStacksRequest) (*ListStacksResponse, error) {
	resObject := &ListStacksResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *StackQueryServiceImpl) ListStackEvents(ctx context.Context, req *ListStackEventsRequest) (*ListStackEventsResponse, error) {
	resObject := &ListStackEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

// State Query Service for %sEnvironment
// QuerySet is the query set for the Environment service.

type EnvironmentPSMQuerySet = psm.StateQuerySet[
	*GetEnvironmentRequest,
	*GetEnvironmentResponse,
	*ListEnvironmentsRequest,
	*ListEnvironmentsResponse,
	*ListEnvironmentEventsRequest,
	*ListEnvironmentEventsResponse,
]

func NewEnvironmentPSMQuerySet(
	smSpec psm.QuerySpec[
		*GetEnvironmentRequest,
		*GetEnvironmentResponse,
		*ListEnvironmentsRequest,
		*ListEnvironmentsResponse,
		*ListEnvironmentEventsRequest,
		*ListEnvironmentEventsResponse,
	],
	options psm.StateQueryOptions,
) (*EnvironmentPSMQuerySet, error) {
	return psm.BuildStateQuerySet[
		*GetEnvironmentRequest,
		*GetEnvironmentResponse,
		*ListEnvironmentsRequest,
		*ListEnvironmentsResponse,
		*ListEnvironmentEventsRequest,
		*ListEnvironmentEventsResponse,
	](smSpec, options)
}

type EnvironmentPSMQuerySpec = psm.QuerySpec[
	*GetEnvironmentRequest,
	*GetEnvironmentResponse,
	*ListEnvironmentsRequest,
	*ListEnvironmentsResponse,
	*ListEnvironmentEventsRequest,
	*ListEnvironmentEventsResponse,
]

func DefaultEnvironmentPSMQuerySpec(tableSpec psm.QueryTableSpec) EnvironmentPSMQuerySpec {
	return psm.QuerySpec[
		*GetEnvironmentRequest,
		*GetEnvironmentResponse,
		*ListEnvironmentsRequest,
		*ListEnvironmentsResponse,
		*ListEnvironmentEventsRequest,
		*ListEnvironmentEventsResponse,
	]{
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(req *ListEnvironmentsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(req *ListEnvironmentEventsRequest) (map[string]interface{}, error) {
			filter := map[string]interface{}{}
			filter["environment_id"] = req.EnvironmentId
			return filter, nil
		},
	}
}

type EnvironmentQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *EnvironmentPSMQuerySet
	UnsafeEnvironmentQueryServiceServer
}

var _ EnvironmentQueryServiceServer = &EnvironmentQueryServiceImpl{}

func NewEnvironmentQueryServiceImpl(db sqrlx.Transactor, querySet *EnvironmentPSMQuerySet) *EnvironmentQueryServiceImpl {
	return &EnvironmentQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *EnvironmentQueryServiceImpl) GetEnvironment(ctx context.Context, req *GetEnvironmentRequest) (*GetEnvironmentResponse, error) {
	resObject := &GetEnvironmentResponse{}
	err := s.querySet.Get(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *EnvironmentQueryServiceImpl) ListEnvironments(ctx context.Context, req *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error) {
	resObject := &ListEnvironmentsResponse{}
	err := s.querySet.List(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *EnvironmentQueryServiceImpl) ListEnvironmentEvents(ctx context.Context, req *ListEnvironmentEventsRequest) (*ListEnvironmentEventsResponse, error) {
	resObject := &ListEnvironmentEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req, resObject)
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
