// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_spb

import (
	context "context"
	fmt "fmt"

	j5reflect "github.com/pentops/j5/lib/j5reflect"
	j5schema "github.com/pentops/j5/lib/j5schema"
	psm "github.com/pentops/j5/lib/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// State Query Service for %sCluster
// QuerySet is the query set for the Cluster service.

type ClusterPSMQuerySet = psm.StateQuerySet

func NewClusterPSMQuerySet(
	smSpec psm.QuerySpec,
	options psm.StateQueryOptions,
) (*ClusterPSMQuerySet, error) {
	return psm.BuildStateQuerySet(smSpec, options)
}

type ClusterPSMQuerySpec = psm.QuerySpec

func DefaultClusterPSMQuerySpec(tableSpec psm.QueryTableSpec) ClusterPSMQuerySpec {
	return psm.QuerySpec{
		GetMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&GetClusterRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&GetClusterResponse{}).ProtoReflect().Descriptor()),
		},
		ListMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&ListClustersRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&ListClustersResponse{}).ProtoReflect().Descriptor()),
		},
		ListEventsMethod: &j5schema.MethodSchema{
			Request:  j5schema.MustObjectSchema((&ListClusterEventsRequest{}).ProtoReflect().Descriptor()),
			Response: j5schema.MustObjectSchema((&ListClusterEventsResponse{}).ProtoReflect().Descriptor()),
		},
		QueryTableSpec: tableSpec,
		ListRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*ListClustersRequest)
			if !ok {
				return nil, fmt.Errorf("expected *ListClustersRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			return filter, nil
		},
		ListEventsRequestFilter: func(reqReflect j5reflect.Object) (map[string]interface{}, error) {
			req, ok := reqReflect.Interface().(*ListClusterEventsRequest)
			if !ok {
				return nil, fmt.Errorf("expected *ListClusterEventsRequest but got %T", req)
			}
			filter := map[string]interface{}{}
			filter["cluster_id"] = req.ClusterId
			return filter, nil
		},
	}
}

type ClusterQueryServiceImpl struct {
	db       sqrlx.Transactor
	querySet *ClusterPSMQuerySet
	UnsafeClusterQueryServiceServer
}

var _ ClusterQueryServiceServer = &ClusterQueryServiceImpl{}

func NewClusterQueryServiceImpl(db sqrlx.Transactor, querySet *ClusterPSMQuerySet) *ClusterQueryServiceImpl {
	return &ClusterQueryServiceImpl{
		db:       db,
		querySet: querySet,
	}
}

func (s *ClusterQueryServiceImpl) GetCluster(ctx context.Context, req *GetClusterRequest) (*GetClusterResponse, error) {
	resObject := &GetClusterResponse{}
	err := s.querySet.Get(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *ClusterQueryServiceImpl) ListClusters(ctx context.Context, req *ListClustersRequest) (*ListClustersResponse, error) {
	resObject := &ListClustersResponse{}
	err := s.querySet.List(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}

func (s *ClusterQueryServiceImpl) ListClusterEvents(ctx context.Context, req *ListClusterEventsRequest) (*ListClusterEventsResponse, error) {
	resObject := &ListClusterEventsResponse{}
	err := s.querySet.ListEvents(ctx, s.db, req.J5Object(), resObject.J5Object())
	if err != nil {
		return nil, err
	}
	return resObject, nil
}
