// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"

	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/j5/lib/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM StackPSM

type StackPSM = psm.StateMachine[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
]

type StackPSMDB = psm.DBStateMachine[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
]

type StackPSMEventSpec = psm.EventSpec[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
]

type StackPSMHookBaton = psm.HookBaton[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
]

type StackPSMFullBaton = psm.CallbackBaton[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
]

type StackPSMEventKey = string

const (
	StackPSMEventNil                 StackPSMEventKey = "<nil>"
	StackPSMEventConfigured          StackPSMEventKey = "configured"
	StackPSMEventDeploymentRequested StackPSMEventKey = "deployment_requested"
	StackPSMEventDeploymentCompleted StackPSMEventKey = "deployment_completed"
	StackPSMEventDeploymentFailed    StackPSMEventKey = "deployment_failed"
	StackPSMEventRunDeployment       StackPSMEventKey = "run_deployment"
)

// EXTEND StackKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *StackKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.stack"
}
func (msg *StackKeys) PSMKeyValues() (map[string]any, error) {
	keyset := map[string]any{
		"stack_id": msg.StackId,
	}
	if msg.EnvironmentId != "" {
		keyset["environment_id"] = msg.EnvironmentId
	}
	if msg.ClusterId != "" {
		keyset["cluster_id"] = msg.ClusterId
	}
	return keyset, nil
}

// EXTEND StackState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackState) PSMIsSet() bool {
	return msg != nil
}

func (msg *StackState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *StackState) PSMKeys() *StackKeys {
	return msg.Keys
}

func (msg *StackState) SetStatus(status StackStatus) {
	msg.Status = status
}

func (msg *StackState) SetPSMKeys(inner *StackKeys) {
	msg.Keys = inner
}

func (msg *StackState) PSMData() *StackStateData {
	if msg.Data == nil {
		msg.Data = &StackStateData{}
	}
	return msg.Data
}

// EXTEND StackStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND StackEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *StackEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *StackEvent) PSMKeys() *StackKeys {
	return msg.Keys
}

func (msg *StackEvent) SetPSMKeys(inner *StackKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the StackPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *StackEvent) PSMEventKey() StackPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return StackPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *StackEvent) UnwrapPSMEvent() StackPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *StackEventType_Configured_:
		return v.Configured
	case *StackEventType_DeploymentRequested_:
		return v.DeploymentRequested
	case *StackEventType_DeploymentCompleted_:
		return v.DeploymentCompleted
	case *StackEventType_DeploymentFailed_:
		return v.DeploymentFailed
	case *StackEventType_RunDeployment_:
		return v.RunDeployment
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *StackEvent) SetPSMEvent(inner StackPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &StackEventType{}
	}
	switch v := inner.(type) {
	case *StackEventType_Configured:
		msg.Event.Type = &StackEventType_Configured_{Configured: v}
	case *StackEventType_DeploymentRequested:
		msg.Event.Type = &StackEventType_DeploymentRequested_{DeploymentRequested: v}
	case *StackEventType_DeploymentCompleted:
		msg.Event.Type = &StackEventType_DeploymentCompleted_{DeploymentCompleted: v}
	case *StackEventType_DeploymentFailed:
		msg.Event.Type = &StackEventType_DeploymentFailed_{DeploymentFailed: v}
	case *StackEventType_RunDeployment:
		msg.Event.Type = &StackEventType_RunDeployment_{RunDeployment: v}
	default:
		return fmt.Errorf("invalid type %T for StackEventType", v)
	}
	return nil
}

type StackPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() StackPSMEventKey
}

// EXTEND StackEventType_Configured with the StackPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*StackEventType_Configured) PSMEventKey() StackPSMEventKey {
	return StackPSMEventConfigured
}

// EXTEND StackEventType_DeploymentRequested with the StackPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEventType_DeploymentRequested) PSMIsSet() bool {
	return msg != nil
}

func (*StackEventType_DeploymentRequested) PSMEventKey() StackPSMEventKey {
	return StackPSMEventDeploymentRequested
}

// EXTEND StackEventType_DeploymentCompleted with the StackPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEventType_DeploymentCompleted) PSMIsSet() bool {
	return msg != nil
}

func (*StackEventType_DeploymentCompleted) PSMEventKey() StackPSMEventKey {
	return StackPSMEventDeploymentCompleted
}

// EXTEND StackEventType_DeploymentFailed with the StackPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEventType_DeploymentFailed) PSMIsSet() bool {
	return msg != nil
}

func (*StackEventType_DeploymentFailed) PSMEventKey() StackPSMEventKey {
	return StackPSMEventDeploymentFailed
}

// EXTEND StackEventType_RunDeployment with the StackPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *StackEventType_RunDeployment) PSMIsSet() bool {
	return msg != nil
}

func (*StackEventType_RunDeployment) PSMEventKey() StackPSMEventKey {
	return StackPSMEventRunDeployment
}

func StackPSMBuilder() *psm.StateMachineConfig[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{}
}

// StackPSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func StackPSMMutation[SE StackPSMEvent](cb func(*StackStateData, SE) error) psm.TransitionMutation[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
	SE,              // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
		SE,              // Specific event type for the transition
	](cb)
}

// StackPSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func StackPSMLogicHook[
	SE StackPSMEvent,
](
	cb func(
		context.Context,
		StackPSMHookBaton,
		*StackState,
		SE,
	) error) psm.TransitionHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton StackPSMFullBaton, state *StackState, event *StackEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// StackPSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func StackPSMDataHook[
	SE StackPSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*StackState,
		SE,
	) error) psm.TransitionHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton StackPSMFullBaton, state *StackState, event *StackEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: true,
	}
}

// StackPSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func StackPSMLinkHook[
	SE StackPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*StackState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	wrapped := func(ctx context.Context, tx sqrlx.Transaction, state *StackState, event SE, add func(DK, DIE)) error {
		return cb(ctx, state, event, add)
	}
	return psm.TransitionHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton StackPSMFullBaton, state *StackState, event *StackEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, wrapped, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// StackPSMLinkDBHook like LinkHook, but has access to the current transaction for reads only (not enforced), use in place of controller logic to look up existing state.
func StackPSMLinkDBHook[
	SE StackPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		sqrlx.Transaction,
		*StackState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton StackPSMFullBaton, state *StackState, event *StackEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// StackPSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func StackPSMGeneralLogicHook(
	cb func(
		context.Context,
		StackPSMHookBaton,
		*StackState,
		*StackEvent,
	) error) psm.GeneralEventHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton StackPSMFullBaton,
			state *StackState,
			event *StackEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// StackPSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func StackPSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*StackState,
	) error) psm.GeneralStateHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton StackPSMFullBaton,
			state *StackState,
		) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// StackPSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func StackPSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*StackState,
		*StackEvent,
	) error) psm.GeneralEventHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton StackPSMFullBaton,
			state *StackState,
			event *StackEvent,
		) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// StackPSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func StackPSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*StackState,
		*StackEvent,
	) error) psm.GeneralEventHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton StackPSMFullBaton,
			state *StackState,
			event *StackEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// StackPSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func StackPSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*StackState,
	) error) psm.GeneralStateHook[
	*StackKeys,      // implements psm.IKeyset
	*StackState,     // implements psm.IState
	StackStatus,     // implements psm.IStatusEnum
	*StackStateData, // implements psm.IStateData
	*StackEvent,     // implements psm.IEvent
	StackPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*StackKeys,      // implements psm.IKeyset
		*StackState,     // implements psm.IState
		StackStatus,     // implements psm.IStatusEnum
		*StackStateData, // implements psm.IStateData
		*StackEvent,     // implements psm.IEvent
		StackPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton StackPSMFullBaton,
			state *StackState,
		) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *StackEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
