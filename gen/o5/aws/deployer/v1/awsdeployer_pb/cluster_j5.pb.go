// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsdeployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *ClusterKeys) Clone() any {
	return proto.Clone(msg).(*ClusterKeys)
}
func (msg *ClusterKeys) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterKeys) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ClusterState) Clone() any {
	return proto.Clone(msg).(*ClusterState)
}
func (msg *ClusterState) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterState) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ClusterStateData) Clone() any {
	return proto.Clone(msg).(*ClusterStateData)
}
func (msg *ClusterStateData) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterStateData) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterOverride) Clone() any {
	return proto.Clone(msg).(*ParameterOverride)
}
func (msg *ParameterOverride) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterOverride) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ClusterEvent) Clone() any {
	return proto.Clone(msg).(*ClusterEvent)
}
func (msg *ClusterEvent) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterEvent) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ClusterEventType is a oneof wrapper
type ClusterEventTypeKey string

const (
	ClusterEvent_Type_Configured ClusterEventTypeKey = "configured"
	ClusterEvent_Type_Override   ClusterEventTypeKey = "override"
)

func (x *ClusterEventType) TypeKey() (ClusterEventTypeKey, bool) {
	switch x.Type.(type) {
	case *ClusterEventType_Configured_:
		return ClusterEvent_Type_Configured, true
	case *ClusterEventType_Override_:
		return ClusterEvent_Type_Override, true
	default:
		return "", false
	}
}

type IsClusterEventTypeWrappedType interface {
	ClusterEventTypeKey() ClusterEventTypeKey
	proto.Message
}

func (x *ClusterEventType) Set(val IsClusterEventTypeWrappedType) {
	switch v := val.(type) {
	case *ClusterEventType_Configured:
		x.Type = &ClusterEventType_Configured_{Configured: v}
	case *ClusterEventType_Override:
		x.Type = &ClusterEventType_Override_{Override: v}
	}
}
func (x *ClusterEventType) Get() IsClusterEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *ClusterEventType_Configured_:
		return v.Configured
	case *ClusterEventType_Override_:
		return v.Override
	default:
		return nil
	}
}
func (x *ClusterEventType_Configured) ClusterEventTypeKey() ClusterEventTypeKey {
	return ClusterEvent_Type_Configured
}
func (x *ClusterEventType_Override) ClusterEventTypeKey() ClusterEventTypeKey {
	return ClusterEvent_Type_Override
}
func (msg *ClusterEventType) Clone() any {
	return proto.Clone(msg).(*ClusterEventType)
}

type IsClusterEventType_Type = isClusterEventType_Type

func (msg *ClusterEventType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterEventType_Configured) Clone() any {
	return proto.Clone(msg).(*ClusterEventType_Configured)
}
func (msg *ClusterEventType_Configured) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterEventType_Configured) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ClusterEventType_Override) Clone() any {
	return proto.Clone(msg).(*ClusterEventType_Override)
}
func (msg *ClusterEventType_Override) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ClusterEventType_Override) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ClusterStatus
const (
	ClusterStatus_UNSPECIFIED ClusterStatus = 0
	ClusterStatus_ACTIVE      ClusterStatus = 1
)

var (
	ClusterStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
	}
	ClusterStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
	}
	ClusterStatus_value_either = map[string]int32{
		"UNSPECIFIED":                0,
		"CLUSTER_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                     1,
		"CLUSTER_STATUS_ACTIVE":      1,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x ClusterStatus) ShortString() string {
	return ClusterStatus_name_short[int32(x)]
}
func (x ClusterStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *ClusterStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := ClusterStatus_value_either[strVal]
	*x = ClusterStatus(val)
	return nil
}
