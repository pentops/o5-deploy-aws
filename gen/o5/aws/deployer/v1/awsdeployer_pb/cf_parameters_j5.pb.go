// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsdeployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"

	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *Parameter) Clone() any {
	return proto.Clone(msg).(*Parameter)
}
func (msg *Parameter) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *Parameter) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ParameterSourceType is a oneof wrapper
type ParameterSourceTypeKey string

const (
	ParameterSource_Type_Static         ParameterSourceTypeKey = "static"
	ParameterSource_Type_WellKnown      ParameterSourceTypeKey = "wellKnown"
	ParameterSource_Type_RulePriority   ParameterSourceTypeKey = "rulePriority"
	ParameterSource_Type_DesiredCount   ParameterSourceTypeKey = "desiredCount"
	ParameterSource_Type_CrossEnvAttr   ParameterSourceTypeKey = "crossEnvAttr"
	ParameterSource_Type_EnvVar         ParameterSourceTypeKey = "envVar"
	ParameterSource_Type_NamedIamPolicy ParameterSourceTypeKey = "namedIamPolicy"
	ParameterSource_Type_Aurora         ParameterSourceTypeKey = "aurora"
	ParameterSource_Type_DatabaseServer ParameterSourceTypeKey = "databaseServer"
)

func (x *ParameterSourceType) TypeKey() (ParameterSourceTypeKey, bool) {
	switch x.Type.(type) {
	case *ParameterSourceType_Static_:
		return ParameterSource_Type_Static, true
	case *ParameterSourceType_WellKnown_:
		return ParameterSource_Type_WellKnown, true
	case *ParameterSourceType_RulePriority_:
		return ParameterSource_Type_RulePriority, true
	case *ParameterSourceType_DesiredCount_:
		return ParameterSource_Type_DesiredCount, true
	case *ParameterSourceType_CrossEnvAttr_:
		return ParameterSource_Type_CrossEnvAttr, true
	case *ParameterSourceType_EnvVar_:
		return ParameterSource_Type_EnvVar, true
	case *ParameterSourceType_NamedIamPolicy:
		return ParameterSource_Type_NamedIamPolicy, true
	case *ParameterSourceType_Aurora_:
		return ParameterSource_Type_Aurora, true
	case *ParameterSourceType_DatabaseServer_:
		return ParameterSource_Type_DatabaseServer, true
	default:
		return "", false
	}
}

type IsParameterSourceTypeWrappedType interface {
	ParameterSourceTypeKey() ParameterSourceTypeKey
	proto.Message
}

func (x *ParameterSourceType) Set(val IsParameterSourceTypeWrappedType) {
	switch v := val.(type) {
	case *ParameterSourceType_Static:
		x.Type = &ParameterSourceType_Static_{Static: v}
	case *ParameterSourceType_WellKnown:
		x.Type = &ParameterSourceType_WellKnown_{WellKnown: v}
	case *ParameterSourceType_RulePriority:
		x.Type = &ParameterSourceType_RulePriority_{RulePriority: v}
	case *ParameterSourceType_DesiredCount:
		x.Type = &ParameterSourceType_DesiredCount_{DesiredCount: v}
	case *ParameterSourceType_CrossEnvAttr:
		x.Type = &ParameterSourceType_CrossEnvAttr_{CrossEnvAttr: v}
	case *ParameterSourceType_EnvVar:
		x.Type = &ParameterSourceType_EnvVar_{EnvVar: v}
	case *ParameterSourceType_NamedIAMPolicy:
		x.Type = &ParameterSourceType_NamedIamPolicy{NamedIamPolicy: v}
	case *ParameterSourceType_Aurora:
		x.Type = &ParameterSourceType_Aurora_{Aurora: v}
	case *ParameterSourceType_DatabaseServer:
		x.Type = &ParameterSourceType_DatabaseServer_{DatabaseServer: v}
	}
}
func (x *ParameterSourceType) Get() IsParameterSourceTypeWrappedType {
	switch v := x.Type.(type) {
	case *ParameterSourceType_Static_:
		return v.Static
	case *ParameterSourceType_WellKnown_:
		return v.WellKnown
	case *ParameterSourceType_RulePriority_:
		return v.RulePriority
	case *ParameterSourceType_DesiredCount_:
		return v.DesiredCount
	case *ParameterSourceType_CrossEnvAttr_:
		return v.CrossEnvAttr
	case *ParameterSourceType_EnvVar_:
		return v.EnvVar
	case *ParameterSourceType_NamedIamPolicy:
		return v.NamedIamPolicy
	case *ParameterSourceType_Aurora_:
		return v.Aurora
	case *ParameterSourceType_DatabaseServer_:
		return v.DatabaseServer
	default:
		return nil
	}
}
func (x *ParameterSourceType_Static) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_Static
}
func (x *ParameterSourceType_WellKnown) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_WellKnown
}
func (x *ParameterSourceType_RulePriority) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_RulePriority
}
func (x *ParameterSourceType_DesiredCount) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_DesiredCount
}
func (x *ParameterSourceType_CrossEnvAttr) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_CrossEnvAttr
}
func (x *ParameterSourceType_EnvVar) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_EnvVar
}
func (x *ParameterSourceType_NamedIAMPolicy) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_NamedIamPolicy
}
func (x *ParameterSourceType_Aurora) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_Aurora
}
func (x *ParameterSourceType_DatabaseServer) ParameterSourceTypeKey() ParameterSourceTypeKey {
	return ParameterSource_Type_DatabaseServer
}
func (msg *ParameterSourceType) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType)
}

type IsParameterSourceType_Type = isParameterSourceType_Type

func (msg *ParameterSourceType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_Static) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_Static)
}
func (msg *ParameterSourceType_Static) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_Static) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_WellKnown) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_WellKnown)
}
func (msg *ParameterSourceType_WellKnown) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_WellKnown) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_RulePriority) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_RulePriority)
}
func (msg *ParameterSourceType_RulePriority) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_RulePriority) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_DesiredCount) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_DesiredCount)
}
func (msg *ParameterSourceType_DesiredCount) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_DesiredCount) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_CrossEnvAttr) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_CrossEnvAttr)
}
func (msg *ParameterSourceType_CrossEnvAttr) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_CrossEnvAttr) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_EnvVar) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_EnvVar)
}
func (msg *ParameterSourceType_EnvVar) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_EnvVar) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_NamedIAMPolicy) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_NamedIAMPolicy)
}
func (msg *ParameterSourceType_NamedIAMPolicy) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_NamedIAMPolicy) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *ParameterSourceType_Aurora) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_Aurora)
}
func (msg *ParameterSourceType_Aurora) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_Aurora) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ParameterSourceType_Aurora_Part
const (
	ParameterSourceType_Aurora_Part_UNSPECIFIED ParameterSourceType_Aurora_Part = 0
	ParameterSourceType_Aurora_Part_JSON        ParameterSourceType_Aurora_Part = 1
	ParameterSourceType_Aurora_Part_IDENTIFIER  ParameterSourceType_Aurora_Part = 2
	ParameterSourceType_Aurora_Part_ENDPOINT    ParameterSourceType_Aurora_Part = 3
	ParameterSourceType_Aurora_Part_DBNAME      ParameterSourceType_Aurora_Part = 4
)

var (
	ParameterSourceType_Aurora_Part_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "JSON",
		2: "IDENTIFIER",
		3: "ENDPOINT",
		4: "DBNAME",
	}
	ParameterSourceType_Aurora_Part_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"JSON":        1,
		"IDENTIFIER":  2,
		"ENDPOINT":    3,
		"DBNAME":      4,
	}
	ParameterSourceType_Aurora_Part_value_either = map[string]int32{
		"UNSPECIFIED":      0,
		"PART_UNSPECIFIED": 0,
		"JSON":             1,
		"PART_JSON":        1,
		"IDENTIFIER":       2,
		"PART_IDENTIFIER":  2,
		"ENDPOINT":         3,
		"PART_ENDPOINT":    3,
		"DBNAME":           4,
		"PART_DBNAME":      4,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x ParameterSourceType_Aurora_Part) ShortString() string {
	return ParameterSourceType_Aurora_Part_name_short[int32(x)]
}
func (x ParameterSourceType_Aurora_Part) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *ParameterSourceType_Aurora_Part) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := ParameterSourceType_Aurora_Part_value_either[strVal]
	*x = ParameterSourceType_Aurora_Part(val)
	return nil
}
func (msg *ParameterSourceType_DatabaseServer) Clone() any {
	return proto.Clone(msg).(*ParameterSourceType_DatabaseServer)
}
func (msg *ParameterSourceType_DatabaseServer) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *ParameterSourceType_DatabaseServer) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// ParameterSourceType_DatabaseServer_Part
const (
	ParameterSourceType_DatabaseServer_Part_UNSPECIFIED           ParameterSourceType_DatabaseServer_Part = 0
	ParameterSourceType_DatabaseServer_Part_CLIENT_SECURITY_GROUP ParameterSourceType_DatabaseServer_Part = 1
)

var (
	ParameterSourceType_DatabaseServer_Part_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "CLIENT_SECURITY_GROUP",
	}
	ParameterSourceType_DatabaseServer_Part_value_short = map[string]int32{
		"UNSPECIFIED":           0,
		"CLIENT_SECURITY_GROUP": 1,
	}
	ParameterSourceType_DatabaseServer_Part_value_either = map[string]int32{
		"UNSPECIFIED":                0,
		"PART_UNSPECIFIED":           0,
		"CLIENT_SECURITY_GROUP":      1,
		"PART_CLIENT_SECURITY_GROUP": 1,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x ParameterSourceType_DatabaseServer_Part) ShortString() string {
	return ParameterSourceType_DatabaseServer_Part_name_short[int32(x)]
}
func (x ParameterSourceType_DatabaseServer_Part) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *ParameterSourceType_DatabaseServer_Part) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := ParameterSourceType_DatabaseServer_Part_value_either[strVal]
	*x = ParameterSourceType_DatabaseServer_Part(val)
	return nil
}

// EnvAttr
const (
	EnvAttr_UNSPECIFIED EnvAttr = 0
	EnvAttr_FULL_NAME   EnvAttr = 1
	EnvAttr_SNS_PREFIX  EnvAttr = 2
)

var (
	EnvAttr_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "FULL_NAME",
		2: "SNS_PREFIX",
	}
	EnvAttr_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"FULL_NAME":   1,
		"SNS_PREFIX":  2,
	}
	EnvAttr_value_either = map[string]int32{
		"UNSPECIFIED":          0,
		"ENV_ATTR_UNSPECIFIED": 0,
		"FULL_NAME":            1,
		"ENV_ATTR_FULL_NAME":   1,
		"SNS_PREFIX":           2,
		"ENV_ATTR_SNS_PREFIX":  2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x EnvAttr) ShortString() string {
	return EnvAttr_name_short[int32(x)]
}
func (x EnvAttr) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *EnvAttr) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := EnvAttr_value_either[strVal]
	*x = EnvAttr(val)
	return nil
}
