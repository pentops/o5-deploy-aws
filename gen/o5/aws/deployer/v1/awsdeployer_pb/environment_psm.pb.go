// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"

	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/j5/lib/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM EnvironmentPSM

type EnvironmentPSM = psm.StateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMDB = psm.DBStateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventSpec = psm.EventSpec[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMHookBaton = psm.HookBaton[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMFullBaton = psm.CallbackBaton[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventKey = string

const (
	EnvironmentPSMEventNil        EnvironmentPSMEventKey = "<nil>"
	EnvironmentPSMEventConfigured EnvironmentPSMEventKey = "configured"
)

// EXTEND EnvironmentKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *EnvironmentKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.environment"
}
func (msg *EnvironmentKeys) PSMKeyValues() (map[string]any, error) {
	keyset := map[string]any{
		"environment_id": msg.EnvironmentId,
	}
	if msg.ClusterId != "" {
		keyset["cluster_id"] = msg.ClusterId
	}
	return keyset, nil
}

// EXTEND EnvironmentState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentState) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentState) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentState) SetStatus(status EnvironmentStatus) {
	msg.Status = status
}

func (msg *EnvironmentState) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

func (msg *EnvironmentState) PSMData() *EnvironmentStateData {
	if msg.Data == nil {
		msg.Data = &EnvironmentStateData{}
	}
	return msg.Data
}

// EXTEND EnvironmentStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND EnvironmentEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentEvent) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentEvent) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the EnvironmentPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *EnvironmentEvent) PSMEventKey() EnvironmentPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return EnvironmentPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *EnvironmentEvent) UnwrapPSMEvent() EnvironmentPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return v.Configured
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *EnvironmentEvent) SetPSMEvent(inner EnvironmentPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &EnvironmentEventType{}
	}
	switch v := inner.(type) {
	case *EnvironmentEventType_Configured:
		msg.Event.Type = &EnvironmentEventType_Configured_{Configured: v}
	default:
		return fmt.Errorf("invalid type %T for EnvironmentEventType", v)
	}
	return nil
}

type EnvironmentPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() EnvironmentPSMEventKey
}

// EXTEND EnvironmentEventType_Configured with the EnvironmentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*EnvironmentEventType_Configured) PSMEventKey() EnvironmentPSMEventKey {
	return EnvironmentPSMEventConfigured
}

func EnvironmentPSMBuilder() *psm.StateMachineConfig[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{}
}

// EnvironmentPSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func EnvironmentPSMMutation[SE EnvironmentPSMEvent](cb func(*EnvironmentStateData, SE) error) psm.TransitionMutation[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}

// EnvironmentPSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func EnvironmentPSMLogicHook[
	SE EnvironmentPSMEvent,
](
	cb func(
		context.Context,
		EnvironmentPSMHookBaton,
		*EnvironmentState,
		SE,
	) error) psm.TransitionHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton EnvironmentPSMFullBaton, state *EnvironmentState, event *EnvironmentEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// EnvironmentPSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func EnvironmentPSMDataHook[
	SE EnvironmentPSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*EnvironmentState,
		SE,
	) error) psm.TransitionHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton EnvironmentPSMFullBaton, state *EnvironmentState, event *EnvironmentEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: true,
	}
}

// EnvironmentPSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func EnvironmentPSMLinkHook[
	SE EnvironmentPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*EnvironmentState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	wrapped := func(ctx context.Context, tx sqrlx.Transaction, state *EnvironmentState, event SE, add func(DK, DIE)) error {
		return cb(ctx, state, event, add)
	}
	return psm.TransitionHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton EnvironmentPSMFullBaton, state *EnvironmentState, event *EnvironmentEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, wrapped, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// EnvironmentPSMLinkDBHook like LinkHook, but has access to the current transaction for reads only (not enforced), use in place of controller logic to look up existing state.
func EnvironmentPSMLinkDBHook[
	SE EnvironmentPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		sqrlx.Transaction,
		*EnvironmentState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton EnvironmentPSMFullBaton, state *EnvironmentState, event *EnvironmentEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// EnvironmentPSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func EnvironmentPSMGeneralLogicHook(
	cb func(
		context.Context,
		EnvironmentPSMHookBaton,
		*EnvironmentState,
		*EnvironmentEvent,
	) error) psm.GeneralEventHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton EnvironmentPSMFullBaton,
			state *EnvironmentState,
			event *EnvironmentEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// EnvironmentPSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func EnvironmentPSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*EnvironmentState,
	) error) psm.GeneralStateHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton EnvironmentPSMFullBaton,
			state *EnvironmentState,
		) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// EnvironmentPSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func EnvironmentPSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*EnvironmentState,
		*EnvironmentEvent,
	) error) psm.GeneralEventHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton EnvironmentPSMFullBaton,
			state *EnvironmentState,
			event *EnvironmentEvent,
		) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// EnvironmentPSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func EnvironmentPSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*EnvironmentState,
		*EnvironmentEvent,
	) error) psm.GeneralEventHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton EnvironmentPSMFullBaton,
			state *EnvironmentState,
			event *EnvironmentEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// EnvironmentPSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func EnvironmentPSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*EnvironmentState,
	) error) psm.GeneralStateHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton EnvironmentPSMFullBaton,
			state *EnvironmentState,
		) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *EnvironmentEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
