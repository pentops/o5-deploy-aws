// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// PSM EnvironmentPSM

type EnvironmentPSM = psm.StateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMDB = psm.DBStateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventer = psm.Eventer[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventSpec = psm.EventSpec[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventKey = string

const (
	EnvironmentPSMEventNil        EnvironmentPSMEventKey = "<nil>"
	EnvironmentPSMEventConfigured EnvironmentPSMEventKey = "configured"
)

// EXTEND EnvironmentKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *EnvironmentKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.environment"
}

// EXTEND EnvironmentState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentState) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentState) PSMMetadata() *psm_pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentState) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentState) SetStatus(status EnvironmentStatus) {
	msg.Status = status
}

func (msg *EnvironmentState) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

func (msg *EnvironmentState) PSMData() *EnvironmentStateData {
	if msg.Data == nil {
		msg.Data = &EnvironmentStateData{}
	}
	return msg.Data
}

// EXTEND EnvironmentStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND EnvironmentEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentEvent) PSMMetadata() *psm_pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentEvent) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentEvent) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the EnvironmentPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *EnvironmentEvent) PSMEventKey() EnvironmentPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return EnvironmentPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *EnvironmentEvent) UnwrapPSMEvent() EnvironmentPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return v.Configured
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *EnvironmentEvent) SetPSMEvent(inner EnvironmentPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &EnvironmentEventType{}
	}
	switch v := inner.(type) {
	case *EnvironmentEventType_Configured:
		msg.Event.Type = &EnvironmentEventType_Configured_{Configured: v}
	default:
		return fmt.Errorf("invalid type %T for EnvironmentEventType", v)
	}
	return nil
}

type EnvironmentPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() EnvironmentPSMEventKey
}

// EXTEND EnvironmentEventType_Configured with the EnvironmentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*EnvironmentEventType_Configured) PSMEventKey() EnvironmentPSMEventKey {
	return EnvironmentPSMEventConfigured
}

type EnvironmentPSMTableSpec = psm.PSMTableSpec[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

var DefaultEnvironmentPSMTableSpec = EnvironmentPSMTableSpec{
	TableMap: psm.TableMap{
		State: psm.StateTableSpec{
			TableName: "environment",
			Root:      &psm.FieldSpec{ColumnName: "state"},
		},
		Event: psm.EventTableSpec{
			TableName:     "environment_event",
			Root:          &psm.FieldSpec{ColumnName: "data"},
			ID:            &psm.FieldSpec{ColumnName: "id"},
			Timestamp:     &psm.FieldSpec{ColumnName: "timestamp"},
			Sequence:      &psm.FieldSpec{ColumnName: "sequence"},
			StateSnapshot: &psm.FieldSpec{ColumnName: "state"},
		},
		KeyColumns: []psm.KeyColumn{{
			ColumnName: "environment_id",
			ProtoName:  protoreflect.Name("environment_id"),
			Primary:    true,
			Required:   true,
		}, {
			ColumnName: "cluster_id",
			ProtoName:  protoreflect.Name("cluster_id"),
			Primary:    false,
			Required:   true,
		}},
	},
	KeyValues: func(keys *EnvironmentKeys) (map[string]string, error) {
		keyset := map[string]string{
			"environment_id": keys.EnvironmentId,
			"cluster_id":     keys.ClusterId,
		}
		return keyset, nil
	},
}

func DefaultEnvironmentPSMConfig() *psm.StateMachineConfig[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.NewStateMachineConfig[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](DefaultEnvironmentPSMTableSpec)
}

func NewEnvironmentPSM(config *psm.StateMachineConfig[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]) (*EnvironmentPSM, error) {
	return psm.NewStateMachine[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](config)
}

func EnvironmentPSMMutation[SE EnvironmentPSMEvent](cb func(*EnvironmentStateData, SE) error) psm.PSMMutationFunc[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.PSMMutationFunc[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}

type EnvironmentPSMHookBaton = psm.HookBaton[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

func EnvironmentPSMHook[SE EnvironmentPSMEvent](cb func(context.Context, sqrlx.Transaction, EnvironmentPSMHookBaton, *EnvironmentState, SE) error) psm.PSMHookFunc[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.PSMHookFunc[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}
func EnvironmentPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, EnvironmentPSMHookBaton, *EnvironmentState, *EnvironmentEvent) error) psm.GeneralStateHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
