// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM EnvironmentPSM

type EnvironmentPSM = psm.StateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMDB = psm.DBStateMachine[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventSpec = psm.EventSpec[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

type EnvironmentPSMEventKey = string

const (
	EnvironmentPSMEventNil        EnvironmentPSMEventKey = "<nil>"
	EnvironmentPSMEventConfigured EnvironmentPSMEventKey = "configured"
)

// EXTEND EnvironmentKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *EnvironmentKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.environment"
}
func (msg *EnvironmentKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"environment_id": msg.EnvironmentId,
	}
	if msg.ClusterId != "" {
		keyset["cluster_id"] = msg.ClusterId
	}
	return keyset, nil
}

// EXTEND EnvironmentState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentState) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentState) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentState) SetStatus(status EnvironmentStatus) {
	msg.Status = status
}

func (msg *EnvironmentState) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

func (msg *EnvironmentState) PSMData() *EnvironmentStateData {
	if msg.Data == nil {
		msg.Data = &EnvironmentStateData{}
	}
	return msg.Data
}

// EXTEND EnvironmentStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND EnvironmentEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *EnvironmentEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *EnvironmentEvent) PSMKeys() *EnvironmentKeys {
	return msg.Keys
}

func (msg *EnvironmentEvent) SetPSMKeys(inner *EnvironmentKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the EnvironmentPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *EnvironmentEvent) PSMEventKey() EnvironmentPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return EnvironmentPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *EnvironmentEvent) UnwrapPSMEvent() EnvironmentPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *EnvironmentEventType_Configured_:
		return v.Configured
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *EnvironmentEvent) SetPSMEvent(inner EnvironmentPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &EnvironmentEventType{}
	}
	switch v := inner.(type) {
	case *EnvironmentEventType_Configured:
		msg.Event.Type = &EnvironmentEventType_Configured_{Configured: v}
	default:
		return fmt.Errorf("invalid type %T for EnvironmentEventType", v)
	}
	return nil
}

type EnvironmentPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() EnvironmentPSMEventKey
}

// EXTEND EnvironmentEventType_Configured with the EnvironmentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *EnvironmentEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*EnvironmentEventType_Configured) PSMEventKey() EnvironmentPSMEventKey {
	return EnvironmentPSMEventConfigured
}

func EnvironmentPSMBuilder() *psm.StateMachineConfig[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	]{}
}

func EnvironmentPSMMutation[SE EnvironmentPSMEvent](cb func(*EnvironmentStateData, SE) error) psm.TransitionMutation[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}

type EnvironmentPSMHookBaton = psm.HookBaton[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
]

func EnvironmentPSMLogicHook[SE EnvironmentPSMEvent](cb func(context.Context, EnvironmentPSMHookBaton, *EnvironmentState, SE) error) psm.TransitionLogicHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.TransitionLogicHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}
func EnvironmentPSMDataHook[SE EnvironmentPSMEvent](cb func(context.Context, sqrlx.Transaction, *EnvironmentState, SE) error) psm.TransitionDataHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
] {
	return psm.TransitionDataHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
	](cb)
}
func EnvironmentPSMLinkHook[SE EnvironmentPSMEvent, DK psm.IKeyset, DIE psm.IInnerEvent](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(context.Context, *EnvironmentState, SE, func(DK, DIE)) error,
) psm.LinkHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
	SE,                    // Specific event type for the transition
	DK,                    // Destination Keys
	DIE,                   // Destination Inner Event
] {
	return psm.LinkHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
		SE,                    // Specific event type for the transition
		DK,                    // Destination Keys
		DIE,                   // Destination Inner Event
	]{
		Derive:      cb,
		Destination: linkDestination,
	}
}
func EnvironmentPSMGeneralLogicHook(cb func(context.Context, EnvironmentPSMHookBaton, *EnvironmentState, *EnvironmentEvent) error) psm.GeneralLogicHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralLogicHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func EnvironmentPSMGeneralStateDataHook(cb func(context.Context, sqrlx.Transaction, *EnvironmentState) error) psm.GeneralStateDataHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateDataHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func EnvironmentPSMGeneralEventDataHook(cb func(context.Context, sqrlx.Transaction, *EnvironmentState, *EnvironmentEvent) error) psm.GeneralEventDataHook[
	*EnvironmentKeys,      // implements psm.IKeyset
	*EnvironmentState,     // implements psm.IState
	EnvironmentStatus,     // implements psm.IStatusEnum
	*EnvironmentStateData, // implements psm.IStateData
	*EnvironmentEvent,     // implements psm.IEvent
	EnvironmentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventDataHook[
		*EnvironmentKeys,      // implements psm.IKeyset
		*EnvironmentState,     // implements psm.IState
		EnvironmentStatus,     // implements psm.IStatusEnum
		*EnvironmentStateData, // implements psm.IStateData
		*EnvironmentEvent,     // implements psm.IEvent
		EnvironmentPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
