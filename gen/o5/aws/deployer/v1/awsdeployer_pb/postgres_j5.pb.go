// Code generated by protoc-gen-go-j5. DO NOT EDIT.

package awsdeployer_pb

import (
	j5reflect "github.com/pentops/j5/lib/j5reflect"
	proto "google.golang.org/protobuf/proto"
)

func (msg *PostgresDatabaseResource) Clone() any {
	return proto.Clone(msg).(*PostgresDatabaseResource)
}

type IsPostgresDatabaseResource_Connection = isPostgresDatabaseResource_Connection

func (msg *PostgresDatabaseResource) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresDatabaseResource) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *PostgresSpec) Clone() any {
	return proto.Clone(msg).(*PostgresSpec)
}
func (msg *PostgresSpec) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresSpec) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// PostgresMigrateSpec is a oneof wrapper
type PostgresMigrateSpecTypeKey string

const (
	PostgresMigrateSpec_Type_Ecs PostgresMigrateSpecTypeKey = "ecs"
)

func (x *PostgresMigrateSpec) TypeKey() (PostgresMigrateSpecTypeKey, bool) {
	switch x.Type.(type) {
	case *PostgresMigrateSpec_Ecs:
		return PostgresMigrateSpec_Type_Ecs, true
	default:
		return "", false
	}
}

type IsPostgresMigrateSpecWrappedType interface {
	PostgresMigrateSpecTypeKey() PostgresMigrateSpecTypeKey
	proto.Message
}

func (x *PostgresMigrateSpec) Set(val IsPostgresMigrateSpecWrappedType) {
	switch v := val.(type) {
	case *PostgresMigrateSpec_ECS:
		x.Type = &PostgresMigrateSpec_Ecs{Ecs: v}
	}
}
func (x *PostgresMigrateSpec) Get() IsPostgresMigrateSpecWrappedType {
	switch v := x.Type.(type) {
	case *PostgresMigrateSpec_Ecs:
		return v.Ecs
	default:
		return nil
	}
}
func (x *PostgresMigrateSpec_ECS) PostgresMigrateSpecTypeKey() PostgresMigrateSpecTypeKey {
	return PostgresMigrateSpec_Type_Ecs
}
func (msg *PostgresMigrateSpec) Clone() any {
	return proto.Clone(msg).(*PostgresMigrateSpec)
}

type IsPostgresMigrateSpec_Type = isPostgresMigrateSpec_Type

func (msg *PostgresMigrateSpec) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresMigrateSpec_ECS) Clone() any {
	return proto.Clone(msg).(*PostgresMigrateSpec_ECS)
}
func (msg *PostgresMigrateSpec_ECS) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresMigrateSpec_ECS) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

// PostgresConnectionType is a oneof wrapper
type PostgresConnectionTypeKey string

const (
	PostgresConnection_Type_Aurora         PostgresConnectionTypeKey = "aurora"
	PostgresConnection_Type_SecretsManager PostgresConnectionTypeKey = "secretsManager"
)

func (x *PostgresConnectionType) TypeKey() (PostgresConnectionTypeKey, bool) {
	switch x.Type.(type) {
	case *PostgresConnectionType_Aurora_:
		return PostgresConnection_Type_Aurora, true
	case *PostgresConnectionType_SecretsManager_:
		return PostgresConnection_Type_SecretsManager, true
	default:
		return "", false
	}
}

type IsPostgresConnectionTypeWrappedType interface {
	PostgresConnectionTypeKey() PostgresConnectionTypeKey
	proto.Message
}

func (x *PostgresConnectionType) Set(val IsPostgresConnectionTypeWrappedType) {
	switch v := val.(type) {
	case *PostgresConnectionType_Aurora:
		x.Type = &PostgresConnectionType_Aurora_{Aurora: v}
	case *PostgresConnectionType_SecretsManager:
		x.Type = &PostgresConnectionType_SecretsManager_{SecretsManager: v}
	}
}
func (x *PostgresConnectionType) Get() IsPostgresConnectionTypeWrappedType {
	switch v := x.Type.(type) {
	case *PostgresConnectionType_Aurora_:
		return v.Aurora
	case *PostgresConnectionType_SecretsManager_:
		return v.SecretsManager
	default:
		return nil
	}
}
func (x *PostgresConnectionType_Aurora) PostgresConnectionTypeKey() PostgresConnectionTypeKey {
	return PostgresConnection_Type_Aurora
}
func (x *PostgresConnectionType_SecretsManager) PostgresConnectionTypeKey() PostgresConnectionTypeKey {
	return PostgresConnection_Type_SecretsManager
}
func (msg *PostgresConnectionType) Clone() any {
	return proto.Clone(msg).(*PostgresConnectionType)
}

type IsPostgresConnectionType_Type = isPostgresConnectionType_Type

func (msg *PostgresConnectionType) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresConnectionType_Aurora) Clone() any {
	return proto.Clone(msg).(*PostgresConnectionType_Aurora)
}
func (msg *PostgresConnectionType_Aurora) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresConnectionType_Aurora) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}

func (msg *PostgresConnectionType_SecretsManager) Clone() any {
	return proto.Clone(msg).(*PostgresConnectionType_SecretsManager)
}
func (msg *PostgresConnectionType_SecretsManager) J5Reflect() j5reflect.Root {
	return j5reflect.MustReflect(msg.ProtoReflect())
}

func (msg *PostgresConnectionType_SecretsManager) J5Object() j5reflect.Object {
	return j5reflect.MustReflect(msg.ProtoReflect()).(j5reflect.Object)
}
