// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package awsdeployer_pb

import (
	proto "google.golang.org/protobuf/proto"
)

// RDSAppSpecType is a oneof wrapper
type RDSAppSpecTypeKey string

const (
	RDSAppSpec_AppSecret RDSAppSpecTypeKey = "appSecret"
	RDSAppSpec_AppConn   RDSAppSpecTypeKey = "appConn"
)

func (x *RDSAppSpecType) TypeKey() (RDSAppSpecTypeKey, bool) {
	switch x.Type.(type) {
	case *RDSAppSpecType_AppSecret:
		return RDSAppSpec_AppSecret, true
	case *RDSAppSpecType_AppConn:
		return RDSAppSpec_AppConn, true
	default:
		return "", false
	}
}

type IsRDSAppSpecTypeWrappedType interface {
	TypeKey() RDSAppSpecTypeKey
	proto.Message
}

func (x *RDSAppSpecType) Set(val IsRDSAppSpecTypeWrappedType) {
	switch v := val.(type) {
	case *RDSAppSpecType_SecretsManager:
		x.Type = &RDSAppSpecType_AppSecret{AppSecret: v}
	case *RDSAppSpecType_Aurora:
		x.Type = &RDSAppSpecType_AppConn{AppConn: v}
	}
}
func (x *RDSAppSpecType) Get() IsRDSAppSpecTypeWrappedType {
	switch v := x.Type.(type) {
	case *RDSAppSpecType_AppSecret:
		return v.AppSecret
	case *RDSAppSpecType_AppConn:
		return v.AppConn
	default:
		return nil
	}
}
func (x *RDSAppSpecType_SecretsManager) TypeKey() RDSAppSpecTypeKey {
	return RDSAppSpec_AppSecret
}
func (x *RDSAppSpecType_Aurora) TypeKey() RDSAppSpecTypeKey {
	return RDSAppSpec_AppConn
}

type IsRDSAppSpecType_Type = isRDSAppSpecType_Type

// RDSHostType is a oneof wrapper
type RDSHostTypeKey string

const (
	RDSHost_Aurora         RDSHostTypeKey = "aurora"
	RDSHost_SecretsManager RDSHostTypeKey = "secretsManager"
)

func (x *RDSHostType) TypeKey() (RDSHostTypeKey, bool) {
	switch x.Type.(type) {
	case *RDSHostType_Aurora_:
		return RDSHost_Aurora, true
	case *RDSHostType_SecretsManager_:
		return RDSHost_SecretsManager, true
	default:
		return "", false
	}
}

type IsRDSHostTypeWrappedType interface {
	TypeKey() RDSHostTypeKey
	proto.Message
}

func (x *RDSHostType) Set(val IsRDSHostTypeWrappedType) {
	switch v := val.(type) {
	case *RDSHostType_Aurora:
		x.Type = &RDSHostType_Aurora_{Aurora: v}
	case *RDSHostType_SecretsManager:
		x.Type = &RDSHostType_SecretsManager_{SecretsManager: v}
	}
}
func (x *RDSHostType) Get() IsRDSHostTypeWrappedType {
	switch v := x.Type.(type) {
	case *RDSHostType_Aurora_:
		return v.Aurora
	case *RDSHostType_SecretsManager_:
		return v.SecretsManager
	default:
		return nil
	}
}
func (x *RDSHostType_Aurora) TypeKey() RDSHostTypeKey {
	return RDSHost_Aurora
}
func (x *RDSHostType_SecretsManager) TypeKey() RDSHostTypeKey {
	return RDSHost_SecretsManager
}

type IsRDSHostType_Type = isRDSHostType_Type
