// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"
	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM ClusterPSM

type ClusterPSM = psm.StateMachine[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMDB = psm.DBStateMachine[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMEventSpec = psm.EventSpec[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMEventKey = string

const (
	ClusterPSMEventNil        ClusterPSMEventKey = "<nil>"
	ClusterPSMEventConfigured ClusterPSMEventKey = "configured"
	ClusterPSMEventOverride   ClusterPSMEventKey = "override"
)

// EXTEND ClusterKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *ClusterKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.cluster"
}
func (msg *ClusterKeys) PSMKeyValues() (map[string]string, error) {
	keyset := map[string]string{
		"cluster_id": msg.ClusterId,
	}
	return keyset, nil
}

// EXTEND ClusterState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterState) PSMIsSet() bool {
	return msg != nil
}

func (msg *ClusterState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *ClusterState) PSMKeys() *ClusterKeys {
	return msg.Keys
}

func (msg *ClusterState) SetStatus(status ClusterStatus) {
	msg.Status = status
}

func (msg *ClusterState) SetPSMKeys(inner *ClusterKeys) {
	msg.Keys = inner
}

func (msg *ClusterState) PSMData() *ClusterStateData {
	if msg.Data == nil {
		msg.Data = &ClusterStateData{}
	}
	return msg.Data
}

// EXTEND ClusterStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND ClusterEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *ClusterEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *ClusterEvent) PSMKeys() *ClusterKeys {
	return msg.Keys
}

func (msg *ClusterEvent) SetPSMKeys(inner *ClusterKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the ClusterPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *ClusterEvent) PSMEventKey() ClusterPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return ClusterPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *ClusterEvent) UnwrapPSMEvent() ClusterPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *ClusterEventType_Configured_:
		return v.Configured
	case *ClusterEventType_Override_:
		return v.Override
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *ClusterEvent) SetPSMEvent(inner ClusterPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &ClusterEventType{}
	}
	switch v := inner.(type) {
	case *ClusterEventType_Configured:
		msg.Event.Type = &ClusterEventType_Configured_{Configured: v}
	case *ClusterEventType_Override:
		msg.Event.Type = &ClusterEventType_Override_{Override: v}
	default:
		return fmt.Errorf("invalid type %T for ClusterEventType", v)
	}
	return nil
}

type ClusterPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() ClusterPSMEventKey
}

// EXTEND ClusterEventType_Configured with the ClusterPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*ClusterEventType_Configured) PSMEventKey() ClusterPSMEventKey {
	return ClusterPSMEventConfigured
}

// EXTEND ClusterEventType_Override with the ClusterPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEventType_Override) PSMIsSet() bool {
	return msg != nil
}

func (*ClusterEventType_Override) PSMEventKey() ClusterPSMEventKey {
	return ClusterPSMEventOverride
}

func ClusterPSMBuilder() *psm.StateMachineConfig[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{}
}

func ClusterPSMMutation[SE ClusterPSMEvent](cb func(*ClusterStateData, SE) error) psm.TransitionMutation[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
	SE,                // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
		SE,                // Specific event type for the transition
	](cb)
}

type ClusterPSMHookBaton = psm.HookBaton[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

func ClusterPSMLogicHook[SE ClusterPSMEvent](cb func(context.Context, ClusterPSMHookBaton, *ClusterState, SE) error) psm.TransitionLogicHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
	SE,                // Specific event type for the transition
] {
	return psm.TransitionLogicHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
		SE,                // Specific event type for the transition
	](cb)
}
func ClusterPSMDataHook[SE ClusterPSMEvent](cb func(context.Context, sqrlx.Transaction, *ClusterState, SE) error) psm.TransitionDataHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
	SE,                // Specific event type for the transition
] {
	return psm.TransitionDataHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
		SE,                // Specific event type for the transition
	](cb)
}
func ClusterPSMLinkHook[SE ClusterPSMEvent, DK psm.IKeyset, DIE psm.IInnerEvent](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(context.Context, *ClusterState, SE, func(DK, DIE)) error,
) psm.LinkHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
	SE,                // Specific event type for the transition
	DK,                // Destination Keys
	DIE,               // Destination Inner Event
] {
	return psm.LinkHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
		SE,                // Specific event type for the transition
		DK,                // Destination Keys
		DIE,               // Destination Inner Event
	]{
		Derive:      cb,
		Destination: linkDestination,
	}
}
func ClusterPSMGeneralLogicHook(cb func(context.Context, ClusterPSMHookBaton, *ClusterState, *ClusterEvent) error) psm.GeneralLogicHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralLogicHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func ClusterPSMGeneralStateDataHook(cb func(context.Context, sqrlx.Transaction, *ClusterState) error) psm.GeneralStateDataHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateDataHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
func ClusterPSMGeneralEventDataHook(cb func(context.Context, sqrlx.Transaction, *ClusterState, *ClusterEvent) error) psm.GeneralEventDataHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventDataHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
