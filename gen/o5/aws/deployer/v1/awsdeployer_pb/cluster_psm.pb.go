// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"

	psm_j5pb "github.com/pentops/j5/gen/j5/state/v1/psm_j5pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
)

// PSM ClusterPSM

type ClusterPSM = psm.StateMachine[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMDB = psm.DBStateMachine[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMEventSpec = psm.EventSpec[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMHookBaton = psm.HookBaton[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMFullBaton = psm.CallbackBaton[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
]

type ClusterPSMEventKey = string

const (
	ClusterPSMEventNil        ClusterPSMEventKey = "<nil>"
	ClusterPSMEventConfigured ClusterPSMEventKey = "configured"
	ClusterPSMEventOverride   ClusterPSMEventKey = "override"
)

// EXTEND ClusterKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *ClusterKeys) PSMFullName() string {
	return "o5.aws.deployer.v1.cluster"
}
func (msg *ClusterKeys) PSMKeyValues() (map[string]any, error) {
	keyset := map[string]any{
		"cluster_id": msg.ClusterId,
	}
	return keyset, nil
}

// EXTEND ClusterState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterState) PSMIsSet() bool {
	return msg != nil
}

func (msg *ClusterState) PSMMetadata() *psm_j5pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *ClusterState) PSMKeys() *ClusterKeys {
	return msg.Keys
}

func (msg *ClusterState) SetStatus(status ClusterStatus) {
	msg.Status = status
}

func (msg *ClusterState) SetPSMKeys(inner *ClusterKeys) {
	msg.Keys = inner
}

func (msg *ClusterState) PSMData() *ClusterStateData {
	if msg.Data == nil {
		msg.Data = &ClusterStateData{}
	}
	return msg.Data
}

// EXTEND ClusterStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND ClusterEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *ClusterEvent) PSMMetadata() *psm_j5pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_j5pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *ClusterEvent) PSMKeys() *ClusterKeys {
	return msg.Keys
}

func (msg *ClusterEvent) SetPSMKeys(inner *ClusterKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the ClusterPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *ClusterEvent) PSMEventKey() ClusterPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return ClusterPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *ClusterEvent) UnwrapPSMEvent() ClusterPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *ClusterEventType_Configured_:
		return v.Configured
	case *ClusterEventType_Override_:
		return v.Override
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *ClusterEvent) SetPSMEvent(inner ClusterPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &ClusterEventType{}
	}
	switch v := inner.(type) {
	case *ClusterEventType_Configured:
		msg.Event.Type = &ClusterEventType_Configured_{Configured: v}
	case *ClusterEventType_Override:
		msg.Event.Type = &ClusterEventType_Override_{Override: v}
	default:
		return fmt.Errorf("invalid type %T for ClusterEventType", v)
	}
	return nil
}

type ClusterPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() ClusterPSMEventKey
}

// EXTEND ClusterEventType_Configured with the ClusterPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEventType_Configured) PSMIsSet() bool {
	return msg != nil
}

func (*ClusterEventType_Configured) PSMEventKey() ClusterPSMEventKey {
	return ClusterPSMEventConfigured
}

// EXTEND ClusterEventType_Override with the ClusterPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *ClusterEventType_Override) PSMIsSet() bool {
	return msg != nil
}

func (*ClusterEventType_Override) PSMEventKey() ClusterPSMEventKey {
	return ClusterPSMEventOverride
}

func ClusterPSMBuilder() *psm.StateMachineConfig[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return &psm.StateMachineConfig[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{}
}

// ClusterPSMMutation runs at the start of a transition to merge the event information into the state data object. The state object is mutable in this context.
func ClusterPSMMutation[SE ClusterPSMEvent](cb func(*ClusterStateData, SE) error) psm.TransitionMutation[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
	SE,                // Specific event type for the transition
] {
	return psm.TransitionMutation[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
		SE,                // Specific event type for the transition
	](cb)
}

// ClusterPSMLogicHook runs after the mutation is complete. This hook can trigger side effects, including chained events, which are additional events processed by the state machine. Use this for Business Logic which determines the 'next step' in processing.
func ClusterPSMLogicHook[
	SE ClusterPSMEvent,
](
	cb func(
		context.Context,
		ClusterPSMHookBaton,
		*ClusterState,
		SE,
	) error) psm.TransitionHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton ClusterPSMFullBaton, state *ClusterState, event *ClusterEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, baton, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// ClusterPSMDataHook runs after the mutations, and can be used to update data in tables which are not controlled as the state machine, e.g. for pre-calculating fields for performance reasons. Use of this hook prevents (future) transaction optimizations, as the transaction state when the function is called must needs to match the processing state, but only for this single transition, unlike the GeneralEventDataHook.
func ClusterPSMDataHook[
	SE ClusterPSMEvent,
](
	cb func(
		context.Context,
		sqrlx.Transaction,
		*ClusterState,
		SE,
	) error) psm.TransitionHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton ClusterPSMFullBaton, state *ClusterState, event *ClusterEvent) error {
			asType, ok := any(event.UnwrapPSMEvent()).(SE)
			if !ok {
				name := event.ProtoReflect().Descriptor().FullName()
				return fmt.Errorf("unexpected event type in transition: %s [IE] does not match [SE] (%T)", name, new(SE))
			}
			return cb(ctx, tx, state, asType)
		},
		EventType:   eventType,
		RunOnFollow: true,
	}
}

// ClusterPSMLinkHook runs after the mutation and logic hook, and can be used to link the state machine to other state machines in the same database transaction
func ClusterPSMLinkHook[
	SE ClusterPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		*ClusterState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	wrapped := func(ctx context.Context, tx sqrlx.Transaction, state *ClusterState, event SE, add func(DK, DIE)) error {
		return cb(ctx, state, event, add)
	}
	return psm.TransitionHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton ClusterPSMFullBaton, state *ClusterState, event *ClusterEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, wrapped, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// ClusterPSMLinkDBHook like LinkHook, but has access to the current transaction for reads only (not enforced), use in place of controller logic to look up existing state.
func ClusterPSMLinkDBHook[
	SE ClusterPSMEvent,
	DK psm.IKeyset,
	DIE psm.IInnerEvent,
](
	linkDestination psm.LinkDestination[DK, DIE],
	cb func(
		context.Context,
		sqrlx.Transaction,
		*ClusterState,
		SE,
		func(DK, DIE),
	) error) psm.TransitionHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	eventType := (*new(SE)).PSMEventKey()
	return psm.TransitionHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(ctx context.Context, tx sqrlx.Transaction, baton ClusterPSMFullBaton, state *ClusterState, event *ClusterEvent) error {
			return psm.RunLinkHook(ctx, linkDestination, cb, tx, state, event)
		},
		EventType:   eventType,
		RunOnFollow: false,
	}
}

// ClusterPSMGeneralLogicHook runs once per transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, with the state object in the final state after the transition but prior to processing any further events. Chained events are added to the *end* of the event queue for the transaction, and side effects are published (as always) when the transaction is committed. The function MUST be pure, i.e. It MUST NOT produce any side-effects outside of the HookBaton, and MUST NOT modify the state.
func ClusterPSMGeneralLogicHook(
	cb func(
		context.Context,
		ClusterPSMHookBaton,
		*ClusterState,
		*ClusterEvent,
	) error) psm.GeneralEventHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton ClusterPSMFullBaton,
			state *ClusterState,
			event *ClusterEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// ClusterPSMGeneralStateDataHook runs at the state-machine level regardless of which transition / event is being processed. It runs at-least once before committing a database transaction after multiple transitions are complete. This hook has access only to the final state after the transitions and is used to update other tables based on the resulting state. It MUST be idempotent, it may be called after injecting externally-held state data.
func ClusterPSMGeneralStateDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*ClusterState,
	) error) psm.GeneralStateHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton ClusterPSMFullBaton,
			state *ClusterState,
		) error {
			return cb(ctx, tx, state)
		},
		RunOnFollow: true,
	}
}

// ClusterPSMGeneralEventDataHook runs after each transition at the state-machine level regardless of which transition / event is being processed. It runs exactly once per transition, before any other events are processed. The presence of this hook type prevents (future) transaction optimizations, so should be used sparingly.
func ClusterPSMGeneralEventDataHook(
	cb func(
		context.Context,
		sqrlx.Transaction,
		*ClusterState,
		*ClusterEvent,
	) error) psm.GeneralEventHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton ClusterPSMFullBaton,
			state *ClusterState,
			event *ClusterEvent,
		) error {
			return cb(ctx, tx, state, event)
		},
		RunOnFollow: true,
	}
}

// ClusterPSMEventPublishHook  EventPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func ClusterPSMEventPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*ClusterState,
		*ClusterEvent,
	) error) psm.GeneralEventHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralEventHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton ClusterPSMFullBaton,
			state *ClusterState,
			event *ClusterEvent,
		) error {
			return cb(ctx, baton, state, event)
		},
		RunOnFollow: false,
	}
}

// ClusterPSMUpsertPublishHook runs for each transition, at least once before committing a database transaction after multiple transitions are complete. It should publish a derived version of the event using the publisher.
func ClusterPSMUpsertPublishHook(
	cb func(
		context.Context,
		psm.Publisher,
		*ClusterState,
	) error) psm.GeneralStateHook[
	*ClusterKeys,      // implements psm.IKeyset
	*ClusterState,     // implements psm.IState
	ClusterStatus,     // implements psm.IStatusEnum
	*ClusterStateData, // implements psm.IStateData
	*ClusterEvent,     // implements psm.IEvent
	ClusterPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*ClusterKeys,      // implements psm.IKeyset
		*ClusterState,     // implements psm.IState
		ClusterStatus,     // implements psm.IStatusEnum
		*ClusterStateData, // implements psm.IStateData
		*ClusterEvent,     // implements psm.IEvent
		ClusterPSMEvent,   // implements psm.IInnerEvent
	]{
		Callback: func(
			ctx context.Context,
			tx sqrlx.Transaction,
			baton ClusterPSMFullBaton,
			state *ClusterState,
		) error {
			return cb(ctx, baton, state)
		},
		RunOnFollow: false,
	}
}

func (event *ClusterEvent) EventPublishMetadata() *psm_j5pb.EventPublishMetadata {
	tenantKeys := make([]*psm_j5pb.EventTenant, 0)
	return &psm_j5pb.EventPublishMetadata{
		EventId:   event.Metadata.EventId,
		Sequence:  event.Metadata.Sequence,
		Timestamp: event.Metadata.Timestamp,
		Cause:     event.Metadata.Cause,
		Auth: &psm_j5pb.PublishAuth{
			TenantKeys: tenantKeys,
		},
	}
}
