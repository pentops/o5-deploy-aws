// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package awsdeployer_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
)

// ParameterSourceType is a oneof wrapper
type ParameterSourceTypeKey string

const (
	ParameterSource_Static       ParameterSourceTypeKey = "static"
	ParameterSource_WellKnown    ParameterSourceTypeKey = "wellKnown"
	ParameterSource_RulePriority ParameterSourceTypeKey = "rulePriority"
	ParameterSource_DesiredCount ParameterSourceTypeKey = "desiredCount"
	ParameterSource_CrossEnvAttr ParameterSourceTypeKey = "crossEnvAttr"
	ParameterSource_EnvVar       ParameterSourceTypeKey = "envVar"
)

func (x *ParameterSourceType) TypeKey() (ParameterSourceTypeKey, bool) {
	switch x.Type.(type) {
	case *ParameterSourceType_Static_:
		return ParameterSource_Static, true
	case *ParameterSourceType_WellKnown_:
		return ParameterSource_WellKnown, true
	case *ParameterSourceType_RulePriority_:
		return ParameterSource_RulePriority, true
	case *ParameterSourceType_DesiredCount_:
		return ParameterSource_DesiredCount, true
	case *ParameterSourceType_CrossEnvAttr_:
		return ParameterSource_CrossEnvAttr, true
	case *ParameterSourceType_EnvVar_:
		return ParameterSource_EnvVar, true
	default:
		return "", false
	}
}

type IsParameterSourceTypeWrappedType interface {
	TypeKey() ParameterSourceTypeKey
}

func (x *ParameterSourceType) Set(val IsParameterSourceTypeWrappedType) {
	switch v := val.(type) {
	case *ParameterSourceType_Static:
		x.Type = &ParameterSourceType_Static_{Static: v}
	case *ParameterSourceType_WellKnown:
		x.Type = &ParameterSourceType_WellKnown_{WellKnown: v}
	case *ParameterSourceType_RulePriority:
		x.Type = &ParameterSourceType_RulePriority_{RulePriority: v}
	case *ParameterSourceType_DesiredCount:
		x.Type = &ParameterSourceType_DesiredCount_{DesiredCount: v}
	case *ParameterSourceType_CrossEnvAttr:
		x.Type = &ParameterSourceType_CrossEnvAttr_{CrossEnvAttr: v}
	case *ParameterSourceType_EnvVar:
		x.Type = &ParameterSourceType_EnvVar_{EnvVar: v}
	}
}
func (x *ParameterSourceType) Get() IsParameterSourceTypeWrappedType {
	switch v := x.Type.(type) {
	case *ParameterSourceType_Static_:
		return v.Static
	case *ParameterSourceType_WellKnown_:
		return v.WellKnown
	case *ParameterSourceType_RulePriority_:
		return v.RulePriority
	case *ParameterSourceType_DesiredCount_:
		return v.DesiredCount
	case *ParameterSourceType_CrossEnvAttr_:
		return v.CrossEnvAttr
	case *ParameterSourceType_EnvVar_:
		return v.EnvVar
	default:
		return nil
	}
}
func (x *ParameterSourceType_Static) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_Static
}
func (x *ParameterSourceType_WellKnown) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_WellKnown
}
func (x *ParameterSourceType_RulePriority) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_RulePriority
}
func (x *ParameterSourceType_DesiredCount) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_DesiredCount
}
func (x *ParameterSourceType_CrossEnvAttr) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_CrossEnvAttr
}
func (x *ParameterSourceType_EnvVar) TypeKey() ParameterSourceTypeKey {
	return ParameterSource_EnvVar
}

type IsParameterSourceType_Type = isParameterSourceType_Type

// EnvAttr
const (
	EnvAttr_UNSPECIFIED EnvAttr = 0
	EnvAttr_FULL_NAME   EnvAttr = 1
	EnvAttr_SNS_PREFIX  EnvAttr = 2
)

var (
	EnvAttr_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "FULL_NAME",
		2: "SNS_PREFIX",
	}
	EnvAttr_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"FULL_NAME":   1,
		"SNS_PREFIX":  2,
	}
	EnvAttr_value_either = map[string]int32{
		"UNSPECIFIED":          0,
		"ENV_ATTR_UNSPECIFIED": 0,
		"FULL_NAME":            1,
		"ENV_ATTR_FULL_NAME":   1,
		"SNS_PREFIX":           2,
		"ENV_ATTR_SNS_PREFIX":  2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x EnvAttr) ShortString() string {
	return EnvAttr_name_short[int32(x)]
}
func (x EnvAttr) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *EnvAttr) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := EnvAttr_value_either[strVal]
	*x = EnvAttr(val)
	return nil
}
