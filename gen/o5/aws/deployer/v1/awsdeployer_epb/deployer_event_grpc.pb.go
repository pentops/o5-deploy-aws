// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: o5/aws/deployer/v1/events/deployer_event.proto

package awsdeployer_epb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeployerEvents_Deployment_FullMethodName  = "/o5.aws.deployer.v1.events.DeployerEvents/Deployment"
	DeployerEvents_Stack_FullMethodName       = "/o5.aws.deployer.v1.events.DeployerEvents/Stack"
	DeployerEvents_Environment_FullMethodName = "/o5.aws.deployer.v1.events.DeployerEvents/Environment"
)

// DeployerEventsClient is the client API for DeployerEvents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployerEventsClient interface {
	Deployment(ctx context.Context, in *DeploymentEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stack(ctx context.Context, in *StackEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Environment(ctx context.Context, in *EnvironmentEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deployerEventsClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployerEventsClient(cc grpc.ClientConnInterface) DeployerEventsClient {
	return &deployerEventsClient{cc}
}

func (c *deployerEventsClient) Deployment(ctx context.Context, in *DeploymentEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeployerEvents_Deployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerEventsClient) Stack(ctx context.Context, in *StackEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeployerEvents_Stack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerEventsClient) Environment(ctx context.Context, in *EnvironmentEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeployerEvents_Environment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployerEventsServer is the server API for DeployerEvents service.
// All implementations must embed UnimplementedDeployerEventsServer
// for forward compatibility
type DeployerEventsServer interface {
	Deployment(context.Context, *DeploymentEvent) (*emptypb.Empty, error)
	Stack(context.Context, *StackEvent) (*emptypb.Empty, error)
	Environment(context.Context, *EnvironmentEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeployerEventsServer()
}

// UnimplementedDeployerEventsServer must be embedded to have forward compatible implementations.
type UnimplementedDeployerEventsServer struct {
}

func (UnimplementedDeployerEventsServer) Deployment(context.Context, *DeploymentEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deployment not implemented")
}
func (UnimplementedDeployerEventsServer) Stack(context.Context, *StackEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stack not implemented")
}
func (UnimplementedDeployerEventsServer) Environment(context.Context, *EnvironmentEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Environment not implemented")
}
func (UnimplementedDeployerEventsServer) mustEmbedUnimplementedDeployerEventsServer() {}

// UnsafeDeployerEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployerEventsServer will
// result in compilation errors.
type UnsafeDeployerEventsServer interface {
	mustEmbedUnimplementedDeployerEventsServer()
}

func RegisterDeployerEventsServer(s grpc.ServiceRegistrar, srv DeployerEventsServer) {
	s.RegisterService(&DeployerEvents_ServiceDesc, srv)
}

func _DeployerEvents_Deployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploymentEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerEventsServer).Deployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeployerEvents_Deployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerEventsServer).Deployment(ctx, req.(*DeploymentEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployerEvents_Stack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerEventsServer).Stack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeployerEvents_Stack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerEventsServer).Stack(ctx, req.(*StackEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployerEvents_Environment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerEventsServer).Environment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeployerEvents_Environment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerEventsServer).Environment(ctx, req.(*EnvironmentEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// DeployerEvents_ServiceDesc is the grpc.ServiceDesc for DeployerEvents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeployerEvents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "o5.aws.deployer.v1.events.DeployerEvents",
	HandlerType: (*DeployerEventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deployment",
			Handler:    _DeployerEvents_Deployment_Handler,
		},
		{
			MethodName: "Stack",
			Handler:    _DeployerEvents_Stack_Handler,
		},
		{
			MethodName: "Environment",
			Handler:    _DeployerEvents_Environment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "o5/aws/deployer/v1/events/deployer_event.proto",
}
