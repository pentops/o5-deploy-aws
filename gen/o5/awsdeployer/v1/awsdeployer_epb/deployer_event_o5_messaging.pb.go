// Code generated by Bprotoc-gen-go-o5-messaging . DO NOT EDIT.
// versions:
// - protoc-gen-go-o5-messaging 0.0.0
// source: o5/awsdeployer/v1/events/deployer_event.proto

package awsdeployer_epb

import (
	context "context"
	o5msg "github.com/pentops/o5-messaging.go/o5msg"
)

// Service: DeployerEvents
type DeployerEventsTxSender[C any] struct {
	sender o5msg.TxSender[C]
}

func NewDeployerEventsTxSender[C any](sender o5msg.TxSender[C]) *DeployerEventsTxSender[C] {
	sender.Register(o5msg.TopicDescriptor{
		Service: "o5.awsdeployer.v1.events.DeployerEvents",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Deployment",
				Message: (*DeploymentEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Stack",
				Message: (*StackEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Environment",
				Message: (*EnvironmentEvent).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeployerEventsTxSender[C]{sender: sender}
}

type DeployerEventsCollector[C any] struct {
	collector o5msg.Collector[C]
}

func NewDeployerEventsCollector[C any](collector o5msg.Collector[C]) *DeployerEventsCollector[C] {
	collector.Register(o5msg.TopicDescriptor{
		Service: "o5.awsdeployer.v1.events.DeployerEvents",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Deployment",
				Message: (*DeploymentEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Stack",
				Message: (*StackEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Environment",
				Message: (*EnvironmentEvent).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeployerEventsCollector[C]{collector: collector}
}

type DeployerEventsPublisher struct {
	publisher o5msg.Publisher
}

func NewDeployerEventsPublisher(publisher o5msg.Publisher) *DeployerEventsPublisher {
	publisher.Register(o5msg.TopicDescriptor{
		Service: "o5.awsdeployer.v1.events.DeployerEvents",
		Methods: []o5msg.MethodDescriptor{
			{
				Name:    "Deployment",
				Message: (*DeploymentEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Stack",
				Message: (*StackEvent).ProtoReflect(nil).Descriptor(),
			},
			{
				Name:    "Environment",
				Message: (*EnvironmentEvent).ProtoReflect(nil).Descriptor(),
			},
		},
	})
	return &DeployerEventsPublisher{publisher: publisher}
}

// Method: Deployment

func (msg *DeploymentEvent) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.awsdeployer.v1.events.DeployerEvents",
		GrpcMethod:       "Deployment",
		Headers:          map[string]string{},
		DestinationTopic: "o5-deployer-events",
	}
	return header
}

func (send DeployerEventsTxSender[C]) Deployment(ctx context.Context, sendContext C, msg *DeploymentEvent) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect DeployerEventsCollector[C]) Deployment(sendContext C, msg *DeploymentEvent) {
	collect.collector.Collect(sendContext, msg)
}

func (publish DeployerEventsPublisher) Deployment(ctx context.Context, msg *DeploymentEvent) {
	publish.publisher.Publish(ctx, msg)
}

// Method: Stack

func (msg *StackEvent) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.awsdeployer.v1.events.DeployerEvents",
		GrpcMethod:       "Stack",
		Headers:          map[string]string{},
		DestinationTopic: "o5-deployer-events",
	}
	return header
}

func (send DeployerEventsTxSender[C]) Stack(ctx context.Context, sendContext C, msg *StackEvent) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect DeployerEventsCollector[C]) Stack(sendContext C, msg *StackEvent) {
	collect.collector.Collect(sendContext, msg)
}

func (publish DeployerEventsPublisher) Stack(ctx context.Context, msg *StackEvent) {
	publish.publisher.Publish(ctx, msg)
}

// Method: Environment

func (msg *EnvironmentEvent) O5MessageHeader() o5msg.Header {
	header := o5msg.Header{
		GrpcService:      "o5.awsdeployer.v1.events.DeployerEvents",
		GrpcMethod:       "Environment",
		Headers:          map[string]string{},
		DestinationTopic: "o5-deployer-events",
	}
	return header
}

func (send DeployerEventsTxSender[C]) Environment(ctx context.Context, sendContext C, msg *EnvironmentEvent) error {
	return send.sender.Send(ctx, sendContext, msg)
}

func (collect DeployerEventsCollector[C]) Environment(sendContext C, msg *EnvironmentEvent) {
	collect.collector.Collect(sendContext, msg)
}

func (publish DeployerEventsPublisher) Environment(ctx context.Context, msg *EnvironmentEvent) {
	publish.publisher.Publish(ctx, msg)
}
