// Code generated by protoc-gen-go-psm. DO NOT EDIT.

package awsdeployer_pb

import (
	context "context"
	fmt "fmt"
	psm_pb "github.com/pentops/protostate/gen/state/v1/psm_pb"
	psm "github.com/pentops/protostate/psm"
	sqrlx "github.com/pentops/sqrlx.go/sqrlx"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// PSM DeploymentPSM

type DeploymentPSM = psm.StateMachine[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

type DeploymentPSMDB = psm.DBStateMachine[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

type DeploymentPSMEventer = psm.Eventer[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

type DeploymentPSMEventSpec = psm.EventSpec[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

type DeploymentPSMEventKey = string

const (
	DeploymentPSMEventNil              DeploymentPSMEventKey = "<nil>"
	DeploymentPSMEventCreated          DeploymentPSMEventKey = "created"
	DeploymentPSMEventTriggered        DeploymentPSMEventKey = "triggered"
	DeploymentPSMEventStackWait        DeploymentPSMEventKey = "stack_wait"
	DeploymentPSMEventStackWaitFailure DeploymentPSMEventKey = "stack_wait_failure"
	DeploymentPSMEventStackAvailable   DeploymentPSMEventKey = "stack_available"
	DeploymentPSMEventRunSteps         DeploymentPSMEventKey = "run_steps"
	DeploymentPSMEventStepResult       DeploymentPSMEventKey = "step_result"
	DeploymentPSMEventRunStep          DeploymentPSMEventKey = "run_step"
	DeploymentPSMEventError            DeploymentPSMEventKey = "error"
	DeploymentPSMEventDone             DeploymentPSMEventKey = "done"
	DeploymentPSMEventTerminated       DeploymentPSMEventKey = "terminated"
)

// EXTEND DeploymentKeys with the psm.IKeyset interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentKeys) PSMIsSet() bool {
	return msg != nil
}

// PSMFullName returns the full name of state machine with package prefix
func (msg *DeploymentKeys) PSMFullName() string {
	return "o5.awsdeployer.v1.deployment"
}

// EXTEND DeploymentState with the psm.IState interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentState) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeploymentState) PSMMetadata() *psm_pb.StateMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.StateMetadata{}
	}
	return msg.Metadata
}

func (msg *DeploymentState) PSMKeys() *DeploymentKeys {
	return msg.Keys
}

func (msg *DeploymentState) SetStatus(status DeploymentStatus) {
	msg.Status = status
}

func (msg *DeploymentState) SetPSMKeys(inner *DeploymentKeys) {
	msg.Keys = inner
}

func (msg *DeploymentState) PSMData() *DeploymentStateData {
	if msg.Data == nil {
		msg.Data = &DeploymentStateData{}
	}
	return msg.Data
}

// EXTEND DeploymentStateData with the psm.IStateData interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentStateData) PSMIsSet() bool {
	return msg != nil
}

// EXTEND DeploymentEvent with the psm.IEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEvent) PSMIsSet() bool {
	return msg != nil
}

func (msg *DeploymentEvent) PSMMetadata() *psm_pb.EventMetadata {
	if msg.Metadata == nil {
		msg.Metadata = &psm_pb.EventMetadata{}
	}
	return msg.Metadata
}

func (msg *DeploymentEvent) PSMKeys() *DeploymentKeys {
	return msg.Keys
}

func (msg *DeploymentEvent) SetPSMKeys(inner *DeploymentKeys) {
	msg.Keys = inner
}

// PSMEventKey returns the DeploymentPSMEventPSMEventKey for the event, implementing psm.IEvent
func (msg *DeploymentEvent) PSMEventKey() DeploymentPSMEventKey {
	tt := msg.UnwrapPSMEvent()
	if tt == nil {
		return DeploymentPSMEventNil
	}
	return tt.PSMEventKey()
}

// UnwrapPSMEvent implements psm.IEvent, returning the inner event message
func (msg *DeploymentEvent) UnwrapPSMEvent() DeploymentPSMEvent {
	if msg == nil {
		return nil
	}
	if msg.Event == nil {
		return nil
	}
	switch v := msg.Event.Type.(type) {
	case *DeploymentEventType_Created_:
		return v.Created
	case *DeploymentEventType_Triggered_:
		return v.Triggered
	case *DeploymentEventType_StackWait_:
		return v.StackWait
	case *DeploymentEventType_StackWaitFailure_:
		return v.StackWaitFailure
	case *DeploymentEventType_StackAvailable_:
		return v.StackAvailable
	case *DeploymentEventType_RunSteps_:
		return v.RunSteps
	case *DeploymentEventType_StepResult_:
		return v.StepResult
	case *DeploymentEventType_RunStep_:
		return v.RunStep
	case *DeploymentEventType_Error_:
		return v.Error
	case *DeploymentEventType_Done_:
		return v.Done
	case *DeploymentEventType_Terminated_:
		return v.Terminated
	default:
		return nil
	}
}

// SetPSMEvent sets the inner event message from a concrete type, implementing psm.IEvent
func (msg *DeploymentEvent) SetPSMEvent(inner DeploymentPSMEvent) error {
	if msg.Event == nil {
		msg.Event = &DeploymentEventType{}
	}
	switch v := inner.(type) {
	case *DeploymentEventType_Created:
		msg.Event.Type = &DeploymentEventType_Created_{Created: v}
	case *DeploymentEventType_Triggered:
		msg.Event.Type = &DeploymentEventType_Triggered_{Triggered: v}
	case *DeploymentEventType_StackWait:
		msg.Event.Type = &DeploymentEventType_StackWait_{StackWait: v}
	case *DeploymentEventType_StackWaitFailure:
		msg.Event.Type = &DeploymentEventType_StackWaitFailure_{StackWaitFailure: v}
	case *DeploymentEventType_StackAvailable:
		msg.Event.Type = &DeploymentEventType_StackAvailable_{StackAvailable: v}
	case *DeploymentEventType_RunSteps:
		msg.Event.Type = &DeploymentEventType_RunSteps_{RunSteps: v}
	case *DeploymentEventType_StepResult:
		msg.Event.Type = &DeploymentEventType_StepResult_{StepResult: v}
	case *DeploymentEventType_RunStep:
		msg.Event.Type = &DeploymentEventType_RunStep_{RunStep: v}
	case *DeploymentEventType_Error:
		msg.Event.Type = &DeploymentEventType_Error_{Error: v}
	case *DeploymentEventType_Done:
		msg.Event.Type = &DeploymentEventType_Done_{Done: v}
	case *DeploymentEventType_Terminated:
		msg.Event.Type = &DeploymentEventType_Terminated_{Terminated: v}
	default:
		return fmt.Errorf("invalid type %T for DeploymentEventType", v)
	}
	return nil
}

type DeploymentPSMEvent interface {
	psm.IInnerEvent
	PSMEventKey() DeploymentPSMEventKey
}

// EXTEND DeploymentEventType_Created with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_Created) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_Created) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventCreated
}

// EXTEND DeploymentEventType_Triggered with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_Triggered) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_Triggered) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTriggered
}

// EXTEND DeploymentEventType_StackWait with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_StackWait) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_StackWait) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWait
}

// EXTEND DeploymentEventType_StackWaitFailure with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_StackWaitFailure) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_StackWaitFailure) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackWaitFailure
}

// EXTEND DeploymentEventType_StackAvailable with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_StackAvailable) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_StackAvailable) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStackAvailable
}

// EXTEND DeploymentEventType_RunSteps with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_RunSteps) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_RunSteps) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventRunSteps
}

// EXTEND DeploymentEventType_StepResult with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_StepResult) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_StepResult) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventStepResult
}

// EXTEND DeploymentEventType_RunStep with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_RunStep) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_RunStep) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventRunStep
}

// EXTEND DeploymentEventType_Error with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_Error) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_Error) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventError
}

// EXTEND DeploymentEventType_Done with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_Done) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_Done) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventDone
}

// EXTEND DeploymentEventType_Terminated with the DeploymentPSMEvent interface

// PSMIsSet is a helper for != nil, which does not work with generic parameters
func (msg *DeploymentEventType_Terminated) PSMIsSet() bool {
	return msg != nil
}

func (*DeploymentEventType_Terminated) PSMEventKey() DeploymentPSMEventKey {
	return DeploymentPSMEventTerminated
}

type DeploymentPSMTableSpec = psm.PSMTableSpec[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

var DefaultDeploymentPSMTableSpec = DeploymentPSMTableSpec{
	TableMap: psm.TableMap{
		State: psm.StateTableSpec{
			TableName: "deployment",
			Root:      &psm.FieldSpec{ColumnName: "state"},
		},
		Event: psm.EventTableSpec{
			TableName:     "deployment_event",
			Root:          &psm.FieldSpec{ColumnName: "data"},
			ID:            &psm.FieldSpec{ColumnName: "id"},
			Timestamp:     &psm.FieldSpec{ColumnName: "timestamp"},
			Sequence:      &psm.FieldSpec{ColumnName: "sequence"},
			StateSnapshot: &psm.FieldSpec{ColumnName: "state"},
		},
		KeyColumns: []psm.KeyColumn{{
			ColumnName: "deployment_id",
			ProtoName:  protoreflect.Name("deployment_id"),
			Primary:    true,
			Required:   true,
		}, {
			ColumnName: "stack_id",
			ProtoName:  protoreflect.Name("stack_id"),
			Primary:    false,
			Required:   true,
		}, {
			ColumnName: "environment_id",
			ProtoName:  protoreflect.Name("environment_id"),
			Primary:    false,
			Required:   true,
		}, {
			ColumnName: "cluster_id",
			ProtoName:  protoreflect.Name("cluster_id"),
			Primary:    false,
			Required:   true,
		}},
	},
	KeyValues: func(keys *DeploymentKeys) (map[string]string, error) {
		keyset := map[string]string{
			"deployment_id":  keys.DeploymentId,
			"stack_id":       keys.StackId,
			"environment_id": keys.EnvironmentId,
			"cluster_id":     keys.ClusterId,
		}
		return keyset, nil
	},
}

func DefaultDeploymentPSMConfig() *psm.StateMachineConfig[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.NewStateMachineConfig[
		*DeploymentKeys,      // implements psm.IKeyset
		*DeploymentState,     // implements psm.IState
		DeploymentStatus,     // implements psm.IStatusEnum
		*DeploymentStateData, // implements psm.IStateData
		*DeploymentEvent,     // implements psm.IEvent
		DeploymentPSMEvent,   // implements psm.IInnerEvent
	](DefaultDeploymentPSMTableSpec)
}

func NewDeploymentPSM(config *psm.StateMachineConfig[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]) (*DeploymentPSM, error) {
	return psm.NewStateMachine[
		*DeploymentKeys,      // implements psm.IKeyset
		*DeploymentState,     // implements psm.IState
		DeploymentStatus,     // implements psm.IStatusEnum
		*DeploymentStateData, // implements psm.IStateData
		*DeploymentEvent,     // implements psm.IEvent
		DeploymentPSMEvent,   // implements psm.IInnerEvent
	](config)
}

func DeploymentPSMMutation[SE DeploymentPSMEvent](cb func(*DeploymentStateData, SE) error) psm.PSMMutationFunc[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
	SE,                   // Specific event type for the transition
] {
	return psm.PSMMutationFunc[
		*DeploymentKeys,      // implements psm.IKeyset
		*DeploymentState,     // implements psm.IState
		DeploymentStatus,     // implements psm.IStatusEnum
		*DeploymentStateData, // implements psm.IStateData
		*DeploymentEvent,     // implements psm.IEvent
		DeploymentPSMEvent,   // implements psm.IInnerEvent
		SE,                   // Specific event type for the transition
	](cb)
}

type DeploymentPSMHookBaton = psm.HookBaton[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
]

func DeploymentPSMHook[SE DeploymentPSMEvent](cb func(context.Context, sqrlx.Transaction, DeploymentPSMHookBaton, *DeploymentState, SE) error) psm.PSMHookFunc[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
	SE,                   // Specific event type for the transition
] {
	return psm.PSMHookFunc[
		*DeploymentKeys,      // implements psm.IKeyset
		*DeploymentState,     // implements psm.IState
		DeploymentStatus,     // implements psm.IStatusEnum
		*DeploymentStateData, // implements psm.IStateData
		*DeploymentEvent,     // implements psm.IEvent
		DeploymentPSMEvent,   // implements psm.IInnerEvent
		SE,                   // Specific event type for the transition
	](cb)
}
func DeploymentPSMGeneralHook(cb func(context.Context, sqrlx.Transaction, DeploymentPSMHookBaton, *DeploymentState, *DeploymentEvent) error) psm.GeneralStateHook[
	*DeploymentKeys,      // implements psm.IKeyset
	*DeploymentState,     // implements psm.IState
	DeploymentStatus,     // implements psm.IStatusEnum
	*DeploymentStateData, // implements psm.IStateData
	*DeploymentEvent,     // implements psm.IEvent
	DeploymentPSMEvent,   // implements psm.IInnerEvent
] {
	return psm.GeneralStateHook[
		*DeploymentKeys,      // implements psm.IKeyset
		*DeploymentState,     // implements psm.IState
		DeploymentStatus,     // implements psm.IStatusEnum
		*DeploymentStateData, // implements psm.IStateData
		*DeploymentEvent,     // implements psm.IEvent
		DeploymentPSMEvent,   // implements psm.IInnerEvent
	](cb)
}
